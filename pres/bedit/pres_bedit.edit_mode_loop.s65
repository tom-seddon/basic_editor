edit_mode_loop:				
					
		LDX	#$FF
		TXS
		STX	byte_6A7
		LDA	byte_6AB
		BEQ	loc_9AE6
		JSR	kbflush
loc_9AE6:				
		LDX	#0
		LDY	#$FF
		LDA	#216		; read length of soft key string
		JSR	OSBYTE		; flush	pending	soft key expansion
                .if acornsoft_version
		STX	byte_3A		; save old value (??)
                .else
                stx byte_38
                .endif
		JSR	reset_cursor_shape
                .if acornsoft_version
		JSR	getch
                .else
L864D:
                jsr is_Electron
                bcc L8673       ; taken if not Electron
                lda is_insert_mode
                beq L8673
                ldx #0          ; fg=0
                ldy #$81        ; bg=129
                lda screen_mode
                cmp #1
                bne L8670       ; taken if mode!=1
                ldy #$83        ; bg=131
L8670:
                jsr L87DC       ; set colours
L8673:
                jsr getch
                jsr LBFB2
                pha
                jsr is_Electron
                bcc check_return_key ; taken if not Electron
                lda is_insert_mode
                beq check_return_key
                ldy #$80        ; bg=128
                ldx #1          ; fg=1
                lda screen_mode
                cmp #1
                bne L868F
                ldx #3          ; fg=3
L868F:
                jsr L87DC       ; set colours
                .endif

check_return_key:			; return?
                .if bet2_version
                pla
                .endif
		CMP	#13
		BNE	check_tab_key
		LDA	#CMD_return_key
		BNE	run_command

check_tab_key:				
		CMP	#9
		BNE	check_delete_key
                .if acornsoft_version
		LDA	#CMD_tab_key
                .else
                lda #CMD_unknown_CA
                .endif
		BNE	run_command

check_delete_key:			
		CMP	#$7F ; ''
                bne run_command
                LDA	#CMD_delete_key

run_command:				
					
		STA	current_command_id
		LDX	#0
		LDY	#$FF
		LDA	#216
		JSR	OSBYTE
		TXA
                .if acornsoft_version
		ORA	byte_3A		; check	if both	soft key expansion states were 0
                .else
                ora byte_38
                .endif
		BEQ	loc_9B2C	; branch taken if both were
		LDA	current_command_id
		CMP	#$20 ; ' '
		BCC	loc_9B28

loc_9B25:				
					
		JMP	dispatch_command

loc_9B28:				
		LDA	#$20 ; ' '
		BNE	set_command	; JMP, in effect

loc_9B2C:				
		LDX	#$FF		; query	keyboard buffer
		LDY	#$FF
		LDA	#128
		JSR	OSBYTE		; get ADVAL/buffer status (AUG p151)
		TXA
		BNE	loc_9B25	; branch taken if any keys in keyboard buffer
		LDA	current_command_id
		CMP	#CMD_return_key
		BNE	loc_9B4E
		LDX	#$9A
		JSR	poll_key	; poll state of	key.
					;
					; Entry:
					; X = -ve INKEY	value
					;
					; Exit:
					; X = 0	and Z set if key pressed
		BNE	loc_9B25
		LDA	#$D

set_command:				
					
		STA	current_command_id
		JMP	dispatch_command

loc_9B4E:
                .if acornsoft_version
		CMP	#CMD_tab_key
                .else        
                cmp #CMD_unknown_CA
                .endif
		BNE	loc_9B5D
		LDX	#$DA		; I key
		JSR	poll_key	; poll state of	key.
					;
					; Entry:
					; X = -ve INKEY	value
					;
					; Exit:
					; X = 0	and Z set if key pressed
		BNE	loc_9B5D	; branch taken if I not	pressed
		LDA	#9		; set command 9	(think this is some kind of fudge to stop Ctrl+I doing anything)
		BNE	set_command

                
loc_9B5D:				
					
		LDX	#0		; Don't change anything
		LDY	#$FF		; Read old value
		LDA	#202
		JSR	OSBYTE		; Read keyboard	status byte (AUG p207)
		STX	byte_38		; bit 3	- 1 if SHIFT pressed
					; bit 4	- 0 if CAPS LOCK engaged
					; bit 5	- 0 if SHIFT LOCK engaged
					; bit 6	- 1 if CTRL pressed
					; bit 7	- 1 if SHIFT is	to reverse CAPS	LOCK/SHIFT LOCK	status

                .if bet2_version
                jsr is_Electron
                lda #$40
                bcs check_shift_delete_key
                lda #8
                .endif

check_shift_delete_key:
                .if bet2_version
                and byte_38
                sta byte_3A
                .endif
		LDA	current_command_id
		CMP	#CMD_delete_key
		BNE	check_shift_tab_key
                .if bet2_version
                lda byte_3A
                .else
		LDA	#8
		BIT	byte_38		; Check	SHIFT state
                .endif
		BEQ	dispatch_command ; Branch taken	if SHIFT not pressed
		LDA	#CMD_shift_delete_key
		STA	current_command_id
		BNE	dispatch_command ; JMP,	in effect

check_shift_tab_key:
                .if acornsoft_version
		CMP	#CMD_tab_key
                .else
                cmp #CMD_unknown_CA
                .endif
		BNE	dispatch_command
                .if bet2_version
                lda byte_3A
                .else
		LDA	#8
		BIT	byte_38		; Check	SHIFT state
                .endif
		BEQ	dispatch_command ; Branch taken	if SHIFT not pressed
                .if acornsoft_version
		LDA	#CMD_shift_tab_key
                .else
                lda #CMD_unknown_BA
                .endif
		STA	current_command_id

dispatch_command:			
					
		LDA	current_command_id
		CMP	#$20 ; ' '
		BCC	execute_non_key_command
		CMP	#$A0
		BCS	execute_non_key_command
		JSR	execute_key_command ; treats command ID	as ASCII char and puts that char into the current line as appropriate.
		JMP	edit_mode_loop

execute_non_key_command:		
					
		JSR	execute_command	; unk_6BD = command to run
		JMP	edit_mode_loop
; End of function edit_mode_loop

; poll state of	key.
;
; Entry:
; X = -ve INKEY	value
;
; Exit:
; X = 0	and Z set if key pressed

poll_key:				
					
		LDY	#$FF
		LDA	#129
		JSR	OSBYTE
		INX
		RTS
; End of function poll_key

make_cursor_invisible:

                .if bet2_version
                pha
                jsr is_Electron
                bcs L8772       ; taken if Electron
                .endif
					
		LDX	#10
		LDY	#32
                .if bet2_version
                pla
                .endif
; End of function make_cursor_invisible



; X = CRTC register
; Y = value

write_crtc:				
					
		PHA			; save A
		TYA
		PHA			; save Y
		TXA
		TAY			; value	to write = original X
		LDX	#0		; $FE00	(CRTC register select)
		LDA	#151		; write	SHEILA
		JSR	OSBYTE
		PLA
		TAY			; value	to write = original Y
		LDX	#1		; $FE01	(CRTC register value)
		LDA	#151		; write	SHEILA
		JSR	OSBYTE
                .if bet2_version
L8770:
                .endif
		PLA
		RTS

                .if bet2_version
L8772:
                ldx #0
                jsr L87B1
                jmp L8770
                .endif

reset_cursor_shape:
                .if bet2_version
                jsr is_Electron
                bcs L87AF
                .endif					
		JSR	get_current_mode_in_x
		LDA	#0
		LDY	is_insert_mode	; 0=overtype 1=insert
		BNE	loc_9BD2
		LDA	byte_89C1,X

loc_9BD2:				
		ORA	unk_31
		TAY
		LDX	#10
		JSR	write_crtc
		JSR	get_current_mode_in_x
		LDA	is_insert_mode	; 0=overtype 1=insert
		BNE	loc_9BE6
		LDY	byte_89C9,X
		BNE	loc_9BE9

loc_9BE6:				
		LDY	byte_89D1,X

loc_9BE9:				
		LDX	#11
		JMP	write_crtc
; End of function reset_cursor_shape

get_current_mode_in_x:			
					
		LDA	#135
		JSR	OSBYTE
		TYA
		TAX
		RTS
; End of function get_current_mode_in_x

                .if bet2_version
L87AF:
                ldx #1
L87B1:
                lda #23
                jsr oswrch
                .if acornsoft_version
                .error ; lda #10
                .else
                lda #1
                .endif
                jsr oswrch
                txa
                jsr oswrch
                lda #0
                ldx #7
L87C3:
                jsr oswrch
                dex
                bne L87C3
                rts
                .endif

kbflush:				
					
		LDX	#0		; Flush	keyboard buffer
		STX	byte_6AB
		LDA	#21		; Flush	specific buffer	(AUG p138)
		JSR	OSBYTE
		LDA	#216		; Read/write length of soft key	string
		JSR	osbyte_with_y0	; Cancel any current soft key expansion
		JMP	clear_escape_condition
; End of function kbflush
