; detokenized line buffer - length (1 byte), then text
byte_400 = $400
unk_401 = $401

; used as a buffer for tokenized line?                
unk_500 = $500
unk_501 = $501
unk_502 = $502
unk_503 = $503

; stores error message
error_message_buffer = $5B1     ;runs until $5ff inclusive
error_message_buffer_size=$600-error_message_buffer

; last search string
search_string = $643
                
byte_6A7 = $6A7
line_was_truncated = $6A8
old_stack_ptr = $6A9
unk_6AA = $6AA
byte_6AB = $6Ab
unk_6AD = $6AD
unk_6AE = $6AE
byte_6AF = $6AF
unk_6B0 = $6B0
unk_6B1 = $6B1
unk_6B2 = $6B2
byte_6B3 = $6B3
higher_order_address = $6B4
code_area_width = $6B6
editor_mode_id = $6B7
unk_6B8 = $6B8
unk_6B9 = $6B9
replace_text_ptr = $6ba
replace_text_length = $6bc
current_command_id = $6BD
input_length = $6be
text_window_bottom_y = $6BF

; lines table, indexed by screen Y coordinare
byte_6C0 = $6C0
byte_6C1 = $6C1

; buffer for various sorts of input
unk_700 = $700
unk_701 = $701

; second buffer for various sorts of input
unk_780 = $780

; max length for command line and search string
max_command_line_length = 100