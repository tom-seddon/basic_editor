ÄTSON 5ÄDH//The Advanced BASIC Editor//ÄDF//Page |P//ÄTM0ÄHM1ÄFM1ÄBM1ÄLM3ÄPL66ÄSRP 16Å.........*.......*.......*.......*.......*.......*.......*.......*.....<find the next occurrence of the string. The search string is alsodisplayed on the INFO screen.6. Search, Global Replace and Selective Replace utilities are alsoavailable from the UTILS menu.2.6 Using Labels2.6.1   What Are Labels?Labels are a feature of The Advanced BASIC Editor which provide auseful way of referring to other statements when their line numbersare unknown. For example, when a program contains GOTO or GOSUBstatements, it may be necessary to refer to a line number which doesnot yet exist. If the program is renumbered as a result of editing,any such references will be replaced with the string '@@@@' and youwill be returned to the command screen with an error message.A more serious problem may arise if renumbering occurs as a result ofthe APPEND command. In such a case, all references to line numbersthat are duplicated in the two programs will be assumed to refer tothe line in the first program and this will not always be the case.Using labels instead of line numbers will help you to avoid problemswith statements whose line numbers are unknown or ambiguous.2.6.2   Choosing Label NamesLabel names must begin with '@' and then follow the rules for BASICvariables. It can be helpful to choose a name which hints at thefunction of the code that follows it.Labels should not start with a BASIC keyword (@PRINT, @ERROR etc), butsuch words can be used in lower case.Labels should be unique; if the same label is used more than once,only the first occurrence will be recognised.2.6.3   Inserting LabelsThe use of labels is best demonstrated with an example. It is commonpractice, when writing BASIC programs, to include a statement like:    10 ON ERROR GOTO 1000somewhere near the beginning of the program to trap errors. Using alabel, the statement would look something like this:    10 ON ERROR GOTO @TRAPand this is known as a 'label reference'.Later on in the program, when you want to code the error routine, youmust insert a 'label statement' before the code. This takes the formof a REM statement, for example:    520 REM @TRAPÄPEHowever the label is being used, all label references must have acorresponding label statement somewhere in the program.2.6.4   Running A Program With LabelsBefore you can run your program the labels must be converted back toline numbers and The Advanced BASIC Editor will do this for youautomatically. Go to the command screen, type:NUMBERand press RETURN. The Advanced BASIC Editor will convert each labelreference to the line number of its corresponding label statement. Theprogram can then be run in the usual way. For example, a program thatlooked like this before the NUMBER command was used:    40 GOTO @LABEL   110   120 REM @LABEL    130would look like this when it is ready to be run:    40 GOTO 120   110   120 REM @LABEL   130WARNING - If the Pack, in UTILS, is used the line numbers will pointto nonexistent lines, once the REMs have been removed ! If replacing a label with a line number would make the line too long,an error message will be displayed. An error will also be displayed ifthere are any label references which are not matched by correspondinglabel statements.If you wish to reinstate the label references, before using APPEND forexample, type:LABELand press RETURN. The label references will replace the appropriateline numbers.The NUMBER and LABEL commands both have a function key equivalent:FUNC 6 (NUMBER) [SHIFT f7] and FUNC 5 (LABEL) [SHIFT f6],respectively.2.7 Changing Edit Modes And Defaults2.7.1   The TAB CommandThe TAB command is a convenient way of moving quickly along a line andÄPEcan be especially useful when you want to align code into columns toimprove readability. Even BASIC programs can be easier to understandif they are well formatted. For example:    10 FOR I% = 1 TO 100    20    READ name$    30    IF LEN(name$) = 0 THEN PROC_finish    40    J% = 1    50    REPEAT    60       IF name$ = surname$(J%) THEN PROC_print_letter    70       J% = J% + 1    80    UNTIL surname$(J%) = "*END*"    90    surname$(I%) = name$   100 NEXT   The TAB command is used to change the distance between tab stops onthe edit screen. The minimum and maximum values for the TAB commandare 0 and 80. Setting TAB 0 effectively disables the TAB key, whereassetting the TAB to a value greater than the edit screen width willmake the TAB key always position the cursor at the beginning of thenext screen line.  For example, type:TAB 10and press return to set the distance between tab stops to 10.2.7.2   The CursorThe Advanced BASIC Editor already gives you a large variety ofmovement commands, but it is useful to be able to speed up normalcursor movements. The operating system command:*FX 12,nallows you to set up a wide range of cursor speeds and is issued fromthe command screen. The smaller the value of n, the faster the cursor.The default value is 8, and a lower value will give you a faster thannormal cursor.2.7.3   Programming Your Own Function Keys (BBC only) The Advanced BASIC Editor makes extensive use of the normal functionkeys, but you can program your own in the usual way with the *KEYcommand. To access them press CTRL SHIFT and the function key. Thisapplies to both the command and edit screen. You may use these keysfor commonly used commands on the command screen or for long variablenames, BASIC keywords, etc on the edit screen.2.7.4   Making Your Own Editing ProfileDisc users can set up an editing profile. This is a set of commandswhich you can execute to change The Advanced BASIC Editor's defaultsfor such things as mode, colours, scrolling, etc. You can store a setof commands using *BUILD and then invoke it with the *EXEC command.You may choose to have this as your auto-boot file. For moreinformation on *BUILD and *EXEC, refer to the User Guide and theFiling System User Guide.ÄPEFor example, the following sequence of commands will create a profilecalled 'START', which calls The Advanced BASIC Editor, sets the editmode to 3, gives you green text on a black background and startsediting in insert mode:*BUILD START    	<RETURN> *BE             	<RETURN> MODE3         	<RETURN> FOREG          	<RETURN> BACKN          	<RETURN> INSERT         	<RETURN>  <ESCAPE>You can then execute these commands by entering *EXEC START.2.7.5   Scrolling  The Advanced BASIC Editor allows scrolling to be disabled so thatmoving down from the bottom of the screen brings the cursor on to thetop line of the screen and moving up from the top of the screen bringsthe cursor on to the bottom line. To disable scrolling, type:NOSCROLLfrom the command screen or press FUNC V (SCROLL OFF) [CTRL f6]. Toenable scrolling type:SCROLLfrom the command screen or press FUNC W (SCROLL ON) [CTRL f5].2.7.6   Changing Mode And ColourTo change the mode in which you edit your program, type the commandMODE followed by one of the numbers 0 to 7. Modes 2 and 5 are notallowed because they only show 20 characters on a line.You can also change mode from the edit screen by pressing FUNC M(MODE) [SHIFT f5] which takes you through the allowable modes insequence.In mode 7, text is white on a black background, in the other modes,the text is white and the background is blue. In any mode other than7, you can change these colours to suit your display by pressing FUNCB (BACKGROUND) [CTRL f7] and FUNC F (FOREGROUND) [CTRL f8]. These keystake you through each colour in turn.You can also change the colour of the editing screen from the commandscreen. Use the BACK and FORE commands. These  have the syntax BACK<colour> and FORE <colour> where the colours available are:         black      N 			blue	   B         red        R                  magenta	   M         green      G                  cyan	   C         yellow     Y                  white	   W	For example, to change the foreground to blue, type:FORE B <RETURN>ÄPE