OC27,79TS5HP2DHce OC27,80,27,15Super Utility IV Instructions - Basic Editoroc27,77JOOC27,77LL69LM10EPOC27,45,1,27,69,27,71U UNPACKoc27,45,0,27,70,27,72The opposite of PACK !. Puts every statement on a new line, and inserts sufficent spaces to restore the correct syntax for screen editing.If there is insufficent room in the line numbering for the required new lines, an error message is displayed, and no unpacking is done, eg:Renumber line(s):  500,  620,  931If a line would become too long after insertion of spaces, it is left in its packed form.bpCE OC27,45,1,27,69,27,71Special Syntaxesoc27,45,0oc27,45,11/ Wildcard Charactersoc27,45,0,27,70,27,72All wildcards are displayed as a block,"oc27,42,5,9,0,0,255,255,255,255oc255,255,255,0" in any listing of search or replace lines.oc27,69,27,71Ctrl@oc27,70,27,72 : A general wildcard character can be inserted into a search (or replace) by Ctrl@. This will then match any character in the program line text.oc27,69,27,71CtrlAoc27,70,27,72 : A "non numeric" wildcard is produced by CtrlA. This will match against any character which is NOT a NUMBER (0-9). This is useful when trying to find specific numbers in a program, ie:To find all occurences of 39: A search$ of '39' would match 399 or 539 or 2390 as well as just 39.Using non numeric wildcards for a search$ of'oc27,42,5,9,0,0,255,255,255,255,255oc255,255,039oc27,42,5,9,0,0,255,255oc255,255,255,255,255,0 '(CtrlA|3|9|CtrlA) will only match against '39' in program text.oc27,69,27,71CtrlBoc27,70,27,72 : A "non variable" wildcard is produced by CtrlB. This will match with any character that cannot form part of a variable name (or PROC/FN name). This eases matching variable names by preventing matches with similar but longer names, ie:A search$ of 'X%' will match with dX%, MAX%, UNIX%, X% etc., but a search$ of 'oc27,42,5,9,0,0,255,255,255,255,255oc255,255,0X%' (CtrlB|X%) will only match X% because the wildcard cannot match with d,A or I.Note that a Ctrl B wildcard at the start of a search$ excludes numbers 0-9, as a variable name cannot start with a number.Ampersands (&) are taken to be valid variable name characters, this prevents a search for the variable FAB1 matching  &FAB1 or similar.oc27,45,1,27,69,27,712/ ASCII Stringsoc27,45,0,27,70,27,72If the Search or replace input is not to be 'tokenised', ie to find the ASCII string RESTORE PAGE rather than the tokenised form (&F790), preceed the input with a quotation mark ". The mark must be the FIRST character of the input string, and does not itself form part of the search or replace string. A quote which is not the first character forms part of the strings in the normal way.bpoc27,45,1,27,69,27,713/ Line Numbersoc27,45,0,27,70,27,72@@ as the FIRST characters in an entry string cuase any immediatly following number to be converted into internal line number format. This allows searching for any reference to a line number, irrespective of whether it follows GOTO,GOSUB,THEN,RESTORE or is in an ON Variable GOTO/GOSUB sequence.This syntax is necessary as line numbers are not held in ASCII. A number following GOTO etc. is converted into a special binary format in 3 bytes, and is preceeded by a byte marker (&8D). A simple search for 520 would not find GOTO 520, and GOTO 520 would not find THEN 520 etc.It is especially important to use the correct format if you wish to include a line number in a replace$. ie: To change ALL references to line 845 to 1040:   Search$=@@845   Replace$=@@1040@@ has been chosen as @% is the only valid syntax in BASIC using @, so @@ would not normally occur.Note that @@Ctrl@ will find all line number references.Any text following the @@number is tokenised in the normal way. If @@ is not followed by a number or Ctrl@ it is ignored.Remember that @@ only works as the first characters in a string.bpce oc27,45,1,27,69,27,71GENERAL CAVEATSoc27,45,0,27,70,27,72OC27,45,1,27,71Varaible Names the same as textoc27,45,0,27,72(eg INPUT"Distance",Distance )  In List, Count, Number and Replace no distinction is made between text and variable names. This will only cause a problem if Global replace is used, so you must be very sure you require global replacement. The replacement of Variable names by Pack does NOT replace text within quotes, ie the above example might become INPUT"Distance",DiThis means that variable names/text cannot be distinguished in DATA statements if the text is not enclosed in quotes. Similarly Xref will not show a match when text is the same as a true variable name.oc27,45,1,27,69,27,71Problems from TOKEN codes vs ASCII codes vs LINE numbers.oc27,45,0,27,70,27,72In BBC Basic bytes > &7F are 'Tokens' and represent reserved words, PRINT, FOR, NEXT etc. However when within quotes codes &81 to &9F represent Teletext/Mode7 control codes. Thus searching for STEP (token &88) would form a match with the embedded teletext control character for Flash on, such a match will be taken as true, and cause a spurious result.Any byte value &40 to &7F may form part of an internal format line number after GOTO etc. Searching for characters "@" to "~" (ASCII &40 to &7E) may thus match against line number bytes and then be counted or listed as a match. Replace however checks all matches for line number markers (&8D). (Note that the marker itself is also the Teletext code for double height!).This type of mismatch is only likely to occur when using single ASCII character search$'s, ie searching for 'T' will match against GOTO 12345, but 'T%' would be unlikely to match a line number.oc27,45,1,27,71Embedded Teletext control codesoc27,45,0,27,72 As explained above the Teletext/Mode7 control codes are the same as some Tokens. If a program contains such control codes embedded in text, mismatches will occur in List, Count, Number and Replace. Again this only presents a real problem for Global replacement. The one code that can cause real problems is &8D, as this is the code for double hieght and also the token for line number bytes after GOTO/GOSUB. An &8D embedded in a string as a control code will confuse any of the functions: at worst the three bytes following may be changed by Renumber/Move/Copy. Replace will not change the three bytes following a &8D, to prevent corruption of GOTOs etc.oc27,45,1,27,71Embedded VDU/Ctrl codesoc27,45,0,27,72When a line is listed by @,L,F,B or U, any embedded VDU codes (ascii 0 to &1F), are shown as pc`|G, |U etc.PC| Subsequently use of the screen editor on such lines will not insert the original codes.oc27,45,1,27,71Assembleroc27,45,0 oc27,72 If the program contains assembler statements the following apply:1/||The assembler statements must be properly enclosed by [|].2/||Variable names and Labels must not be the same as the mnemonics (STA, JSR etc).3/||Comments must be deliniated by '\', otherwise they will be taken as part of the mnemonic/operand field.4/||A space (or #) must seperate mnemonics from variables/Labels, eg: LDABUFFER:JSRSEARCH are acceptable to the assembler, but Xref and Pack will be unable to separate the mnemonic from the variable or label.5/||An Xref of a packed assembler program may produce spurious results if any of the variables/labels have become A,X,Y.OC27,45,1,27,71REM linesoc27,45,0 oc27,72If a program contains GOTOs to lines consisting of only REMarks, you will get 'No such line' on running the program after packing REMs.Ensure the program does not contain such lines BEFORE packing REMs.ce* * * * * * * * * *OC27,45,1,27,71Memory useage.oc27,45,0 oc27,72BASED uses bytes &70 to &8F in page 0, all page &500, and &D80 to &D94 in the NMI area.BASED cannot be used if the current language rom is not BASIC, ie VIEW/WORDWISE etc.BASED will not respond if called from a second processor across the Tube. A special disk based version for the 6502 second processor is available.