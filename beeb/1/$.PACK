$START\ PACK\ ***************************.'PACK\Strip program of REMs,COMMENTS,SPACES and CONCATENATE lines.Space_del=&83.Rem_del=&84.Comm_del=&85.Concat_flag=&86.Assm_flag=&87.Space=&7E.Tempx=&7F.Tempy=&80.Previous=&81.RHS=&82.'Singleuse=&8ALDA#0STA VarpackSTA SingleuseLDX#4.PK1 STA Space_del,X \Clear flagsDEXBPL PK1JSR Printmsg$EQUS"REMs?"$EQUB 0JSR YesNoBNE @E+4DEC Rem_del \Flag on,-veJSR Printmsg$EQUS "Spaces?"$EQUB 0JSR YesNoBNE @E+4DEC Space_delJSR Printmsg$EQUS"Comments?"$EQUB 0JSR YesNoBNE @E+4DEC Comm_delJSR Printmsg$EQUS "Variables?"$EQUB 0JSR YesNoBNE NovarDEC VarpackJSR Printmsg$EQUS "Use unused singles?"$EQUB 0JSR YesNoBNE NovarDEC Singleuse.Novar JSR Printmsg$EQUS"Concatenate?"$EQUB 0JSR YesNoBNE @E+4DEC Concat_flagBIT&FFBPL @E+5JMP Choice \EscapedJSR OSNEWLJSR TopisLDA &12STA&A8LDA&13STA&A9 \Save TOPBIT VarpackBPL @E+5JSR VARPACKJSR OSNEWLJSR TopisJSR Dis_PrinterLDA Comm_delORA Space_delORA Rem_delBEQ PK99 \If no flags set goto concatJSR StartJSR StartB.NxtlinLDY#1LDA(Addr),YSTA(&B),Y \Transfer line#ORA &FF \Test EscapeBPL PK88.PK99 JMP CONCATENATE \TOP found or escaped.PK88 INYLDA(Addr),YSTA(&B),YINYLDA(Addr),YSTA&2A \Keep line lengthINYLDX#1 \Get & put offsets.Nxtchr LDA(Addr),YCMP#13BNE @E+5.PK10 JMP InsertlineCMP#&22 \Quote?BNE NotquoteJSR Putchr.PK3 JSR TransferBEQ PK10 \CR foundCMP#&22BNE PK3 \Transfer up to next quote or CRBEQ Nxtchr.Notquote CMP#&8D \Line#?BNE NotlinenoLDA#4STA Tempx.PK4 JSR TransferDEC TempxBNE PK4 \Transfer 4 bytesBEQ Nxtchr.Notlineno BIT Assm_flag \In assembler?BPL NotassmCMP#"\" \Comment?BNE NotcommtSTX Tempx.PK5 JSR TransferBEQ PK6 \CRCMP#":"BNE PK5 \Transfer up to colon or CRBIT Comm_delBPL Nxtchr \Not deletingLDX Tempx \If deleting restore X to previous valueCPX#1BEQ Nxtchr \If \ first on line ignore it, else..DEYJSR Transfer \Transfer the colonBNE Nxtchr.PK6 BIT Comm_delBPL PK10 \InsertlineLDX TempxBNE PK10 \Insertline.Notcommt CMP#"]" \End of assembler?BNE NotassmSTA Assm_flag \Flag off +ve.Notassm CMP#"[" \Start of assembler?BNE @E+4ROR Assm_flag \Flag on-ve, C=1CMP#&F4 \REM?BNE NotremSTX Tempx.PK7 JSR TransferBNE PK7 \Transfer rest of lineBIT Rem_delBPL Insertline \Not deleting REMSLDX TempxCPX#1 \If X=1 REM is first on lineBEQ Insertline \so force blank lineDEX \If REM not first delete the previous..BNE Insertline \..colon.Notrem CMP#&DC \DATA?BNE Notdata.PK8 JSR TransferBNE PK8 \Transfer rest of lineBEQ Insertline.Notdata CMP#"*" \Check OSCLIBNE NotosclCPX#1BEQ PK8 Transfer rest of line if first chr is *LDA PreviousCMP#":"BEQ PK8 \or start of statementCMP#&8C \or THENBEQ PK8CMP#&8B \or ELSEBEQ PK8LDA#"*" \Restore *.Notoscl CMP#32 \Space?BEQ Spc.PK9 JSR PutchrJMP Nxtchr.Spc BIT Space_delBPL PK9BMI Spcoff.Transfer LDA(Addr),Y.Putchr STA &6FF,XSTA PreviousINXINYCMP#13RTS.Insertline LDA#13STA &6FF,XJSR Nextline \Update Addr.Put INYLDA&6FC,YSTA(&B),YCMP#13BNE PutTYAPHACMP#4BEQ DontLDY#3STA(&B),YJSR UpB.Dont PLACMP#4BNE @E+4LDA#0CLCADC&12BCC @E+4INC&13SECSBC&2ABCS @E+4DEC&13STA&12JSR Topover \Print new TOPJMP Nxtlin.SpcoffSTX TempxSTY TempyINYLDA(Addr),YSTA RHSJSR TypeX2 \Look at next chr.BEQ dropspc \Space not rqdDEXTXAEOR#1STA Space \Letter=1,number=0LDY TempxDEYLDA PreviousJSR TypeX2BEQ dropspcLDX#1 \Dummy for first passINY.back DEXTXAORA SpaceSTA SpaceDEYLDA &6FF,YJSR TypeX2BNE back \Search back until NOT number or NOT letter or line startCPY#0BEQ ChkE \IF terminator on LHS is line Len, OKCMP#"&"BNE ChkELDA RHS \If terminator is hex (&) check RHS chr is not A-FCMP#"A"BCC dropspcCMP#"G"BCC KeepspcBCS dropspc.ChkE LDX SpaceBNE KeepspcLDA RHSCMP#"E" \IF chr after space is E look for possible Exponent confusionBNE dropspcLDA PreviousJSR TypeX2 \Check chr before spaceDEXBNE dropspc \not a number OK\IF it is, space is rqd, to avoid viz. IF X=12 E2%=0 becoming 12E2 (1200).Keepspc \Space required for legal syntaxLDX TempxLDY TempyJSR Transfer.PK11 JMP Nxtchr.dropspc LDX TempxLDY TempyINYBNE PK11 \Dont transfer space.'TypeX2 LDX#0CPY#0BEQ F \Start of lineCMP#&30BCC FCMP#&3ABCC NCMP#&40BCC FCMP#&5BBCC LCMP#&5FBCC FCMP#&7BBCS F.L INX \Rtn X=2 for letters.N INX \Rtn X=1 for numbers.F CPX#0 \Rtn X=0 for othersRTS$END