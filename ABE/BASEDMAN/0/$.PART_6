ÄTSON 5ÄSRP 39ÄDH//The Advanced BASIC Editor//ÄDF//Page |P//ÄTM0ÄHM1ÄFM1ÄBM1ÄLM3ÄPL66Å.........*.......*.......*.......*.......*.......*.......*.......*.....<ÄCEAppendix ACommand reference tableThis appendix outlines the syntax of each command, explains itsfunction and details any restrictions. All commands can be abbreviatedif required and the  minimum abbreviation is given in brackets aftereach command. All commands can be entered in upper or lower case.In addition to these commands, typing a line number will edit fromthat line. If the line does not exist, editing continues from the nextline of the program.APPEND (A)APPEND <program>APPEND loads a program from the current filing system on to the end ofthe program already in memory. If the resulting program is not legalBASIC or if it is too big to fit into the available memory, an errormessage is displayed and the original program is restored. If theprogram is too big for the current editing mode, the mode is reset tothat which requires the least amount of memory. If the line numbers ofthe two programs overlap, the program is renumbered.ExampleAPPEND MYPROGBACK (B)BACK <colour>BACK changes the background colour of the edit screen. Availablecolours are black (N), red (R), green (G), yellow (Y), blue (B),magenta (M), cyan (C) and white (W).ExampleBACK B CHANGE (C)CHANGE <string1> <string2>CHANGE searches through a program and replaces all occurrences of<string1> with <string2>. If the string is not found, or if thereplacement would make a line too long to be edited, an error isdisplayed. If spaces are to be significant, the prompted version ofthe command should be used. In this case, the replace string may benull, effectively deleting the search string wherever it is found.ExampleCHANGE water wineÄPECHANGE   Search string  : INPUT   Replace string : INPUT LINEEDIT (ED)EDIT <string>EDIT searches through a program for the given string. The searchstring may contain embedded spaces but if leading or trailing spacesare to be significant, the prompted version of the command should beused. If the string is not found an error message is displayed. If thestring is found, the program is displayed on the edit screen with thefirst occurrence of the string at the top of the screen. Subsequentsearches can be carried out using the FUNC C (CONTINUE) [f5] key.ExampleEDIT PRINT TABEND (E)ENDEND switches to the edit screen where the last page of the program isdisplayed with the cursor positioned on the last statement.EXIT (EX)EXITEXIT clears the screen, returns to BASIC and issues a BASIC OLDcommand if there is a program in memory.FIND (F)FIND <string>FIND searches through a program and displays all the statementscontaining the search string. If there are more occurrences than canbe displayed on one screen, the FUNC 5 (CONTINUE) [f5] key can be usedto display the next screenfull until no more occurrences are found andthe command screen is returned to. Other valid keys are:ESCAPE            		- return to command screenFUNC 3 (TOP OF SCREEN) [f7]	- edit from selected statementCursor up/down    		- select statement for FUNC 3 [f7] or				FUNC 9 [CTRL f0]FUNC 9 (MARK) [CTRL f0]	- mark selected statementFUNC 0 (GOTO) [CTRL f1]   	- edit from marked statementFUNC A (TOP) [f2]     		- edit from top of programFUNC Z (END) [f3]     		- edit from end of programThe rules for entering the string are the same as for the EDITcommand.ExampleÄPEFIND PRINT TABFORE (FO)FORE <colour>FORE changes the foreground colour of the edit screen. Availablecolours are black (N), red (R), green (G), yellow (Y), blue (B),magenta (M), cyan (C) and white (W).ExampleFORE WGOTO (G)GOTOGOTO changes to the edit screen with the cursor on the markedstatement at the top of the screen. If there is no marked statement anerror message is displayed.HELPHELPHELP lists all available commands with their syntax.IE (I)IEIE creates a new statement at the end of the program, switches to theedit screen and displays the last page of the program with the cursorpositioned on the new statement.INFO (IN)INFOINFO displays information about the program currently in memory.INSERT (INS)INSERTINSERT switches to insert mode for editing.ITITIT creates a new statement at the top of the program and switches tothe edit screen with the cursor on the new statement. If necessary,the program is renumbered.ÄPELABEL (LA)LABELLABEL converts line number references to label names as long as theypoint to valid label statements. A label statement consists of REMfollowed by a valid label name. A label name begins with @ followed byany combination of alphanumeric characters and the characters ' and _.If replacing a line number with a label name would make a line toolong, an error is displayed.  LOAD (L)LOAD (program>LOAD loads a program from the current filing system into memory. Ifthe program is not legal BASIC or if it is too big to fit into theavailable memory, an error is displayed. If the program is too big forthe current editing mode, the mode is reset to mode 6 [7] (whichrequires the least screen memory) and the message No room - Mode resetis displayed.ExampleLOAD MYPROGMODE (M)MODE <n>MODE changes the edit screen mode. Valid modes are 0, 1, 3, 4, 6 and7. If there is not enough memory to edit the program in the requestedmode, an error is displayed.ExampleMODE 3NEW (N)NEWNEW is equivalent to the BASIC NEW command.NOSCROLL (NO)NOSCROLLNOSCROLL disables scrolling on the edit screen for cursor movement.Instead, attempting to move the cursor beyond the screen boundariescauses screen wraparound.NUMBER (NU)NUMBERNUMBER converts label references to line numbers as long as they arematched by valid label statements somewhere in the program. An errorÄPEmessage is displayed if no label references are found, if replacing alabel reference with a line number would make a statement too long orif there are any label references which are not matched by labelstatements.OLD (O)OLDOLD is equivalent to the BASIC OLD command. If there is no valid BASICprogram in memory an error message is displayed. If the program is toobig for the current editing mode, the mode is reset to mode 6 [7](which requires the least screen memory).OVERTYPE (OV)OVERTYPEOVERTYPE switches to overtype mode for editing.QCHANGE (Q)QCHANGE <string1> <string2>QCHANGE searches through a program for all occurrences of <string1>and gives you the option of replacing each occurrence with <string2>.When a match is found, the edit screen is displayed with the statementat the top of the screen and the cursor positioned at the start of thestring. Valid keys are:Y                  		- replace string and display next matchN                  		- leave string unchanged and display				  next matchESCAPE             		- return to command screenFUNC 3 (TOP OF SCREEN) [f7] 	- edit from current statementExampleQCHANGE TOP topRENUMBER (R)RENUMBER <n1>,<n2>RENUMBER renumbers the program from <n1> in increments of <n2>. Ifonly one argument is given, line numbers will begin with that numberand increment in steps of 10. If no arguments are given, the programis renumbered from line 10 in steps of 10. If present, the incrementmust be in the range 1-255. If renumbering would cause a line numberto exceed the maximum (32767), an error is displayed. Any referencesto lines which do not exist will be replaced with the string @@@@ andan error message will be displayed. ExampleRENUMBER 1000,5ÄPERUN (RU)RUNRUN returns to BASIC and runs the program in memory immediately.SAVE (S)SAVE <program>SAVE saves the program in memory to the current filing system.ExampleSAVE MYPROGSCROLL (SC)SCROLLSCROLL enables scrolling on the edit screen.TAB (TA)TAB <n>TAB sets the distance between tab stops to a value between 0 and 80.The default value is 5.ExampleTAB 10TOP (T)TOPTOP edits from the first line of the program. UPDATE (UP)UPDATEUPDATE saves the program in memory to the current filing system usingthe name with which the program was last loaded. The current programname is shown by the INFO command. If there is no current program orit was not accessed by the LOAD command, an error message isdisplayed.UTILS (U)UTILSUTILS brings up the Advanced BASIC Editor Utilities menu (equivalentto *B which can be used from the command screen or from BASIC).Pressing "ESCAPE" from the UTILS menu returns you to the Editorcommand screen. Pressing "Q" from the UTILS menu returns you to BASIC.ÄPEÄCEAppendix BEditing reference tableEditing takes place in the screen mode and colours which have beenselected. The default colours are white text on a blue background(except in mode 7 where they are white text on a black background).Line numbers are displayed to the left of the text area and may not beedited. Only complete statements are displayed on the screen, blanklines are left at the bottom if necessary.The screen scrolls as necessary to accommodate new or extendedstatements. An amended statement is only written to memory when youleave that statement. At this time, any unused screen lines arerecovered and any BASIC keyword abbreviations are expanded. Before astatement is updated in memory, trailing blanks are removed.The cursor keys@U                Moves the cursor up one screen line. Scroll or                  wraparound occurs on the top screen line.@D                Moves the cursor down one screen line. Scroll or                  wraparound occurs on the last statement line.@L                Moves the cursor left one character. Scroll or                  wraparound occurs at the beginning of the top screen                  line.@R                Moves the cursor right one character. Scroll or                  wraparound  occurs at the end of the last statement                  line.FUNC . [SHIFT @U] Displays the previous page of the program with a  		   single statement overlap.FUNC / [SHIFT @D] Displays the following page of the program with a		   single statement overlap.FUNC M [SHIFT @L] Moves the cursor left two charactersFUNC N [SHIFT @R] Moves the cursor right two charactersFUNC 3 [CTRL @D]  Moves the cursor to the beginning of the first		   statement on the screen.FUNC 4 [CTRL @U]  Moves the cursor to the beginning of the last		   statement on the screen.FUNC K [CTRL @L]  From the beginning of a statement, moves the cursor                  to the beginning of the previous statement. From the                  middle of a statement, moves the cursor to the                  beginning of that statement.FUNC L [CTRL @R]  Moves the cursor to the beginning of the next		   statement.ÄPEOther keysESCAPE            Returns to the command screen.RETURN            Creates a new statement immediately following  the                  current one. Automatic renumbering may take place                  and if necessary, the screen will be scrolled.                  Editing continues from the new statement.DELETE            Deletes the character to the left of the cursor. The                  cursor and all following text is moved left one                  position. If the cursor is already at the beginning                  of a statement, this key has no effect.SHIFT DELETE      Deletes the character above the cursor and moves all                  the following text left one position. The cursor                  position remains unchanged.FUNC T [TAB]      Moves the cursor to the next TAB stop.[SHIFT TAB]       Moves the cursor to the beginning of the next screen                  line.ÄPEÄCEAppendix CFunction key reference table for the ElectronKey			FunctionFUNC 1 (INSERT AT TOP) Creates a new statement at the beginning of the			program and renumbers. The first page is			displayed with the cursor on the new statement.FUNC 2 (INSERT AT END)	Creates a new statement at the end of the			program and displays the last page of the			program with the cursor on the new statement.FUNC 3 (CURSOR TO TOP 	Moves the cursor to the start of the firstOF SCREEN)		statement displayed on the current page.FUNC 4 (CURSOR TO 	Moves the cursor to the last statementdisplayedBOTTOM OF SCREEN)	on the current page.FUNC 5 (LABEL)		Converts line number references to label			names, as long as they point to valid label			statements. If replacing a line number with a			label name would make a line too long, an error			message is displayed.FUNC 6 (NUMBER)	Converts label references to line numbers, as			long as they are matched to valid label			statements somewhere in the program. If			replacing a label reference with a line number			would make a line too long, an error message is			displayed.FUNC 7 (SCROLL ON)	Enables scrolling for the edit screen.FUNC 8 (SCROLL OFF)	Disables scrolling for the edit screen.FUNC 9 (MARK)		Marks the current statement as the target for a			subsequent GOTO. any previously marked			statement has its marker removed.FUNC 0 (GOTO MARKER)	Continues editing from the marked statement. If			there is no marked statement the command has no			effect.FUNC A (TOP)		Edits from the top of the program.FUNC B (BACKGROUND)	For modes other than 7, this command sets the			background colour for editing, to the next one			in sequence. The order of the colours is blue,			magenta, cyan, white, black, red, green,			yellow, blue... FUNC C	(CONTINUE)	Looks for the next occurrence of the search			string in a FIND or EDIT command.ÄPEFUNC D (DELETE TO END	Deletes all the text from the cursor positionOF LINE)		to the end of the current statement.FUNC E (EXECUTE)	Executes line commands if any are present in			the program.FUNC F (FOREGROUND)	For modes other than 7, this command sets the			foreground colour for editing to the next one			in sequence. The order of the colours is white,			black, red, green, yellow, blue, magenta, cyan,			white... FUNC H (HOME)		Displays the edit screen with the current			statement positioned at the top of thescreen.		FUNC I (INSERT/ 	Switches between insert mode and overtype modeOVERTYPE)		for editing. When in insert mode, a block			cursor is displayed.FUNC J (JOIN 		Joins the current statement and the followingSTATEMENTS)		one to make one statement. FUNC K (CURSOR TO      Self explanatory. START OF CURRENT LINE)FUNC L (CURSOR TO      Self explanatory.  START OF NEXT LINE)FUNC M (MODE)		Displays the edit screen in the next mode down.			The order in which the modes are displayed is			6, 4, 3, 1, 0, 6...If the program cannot be			edited in the new screen mode, the mode is			reset to mode 6 (which requires the least			screen memory) and an error message is			displayed.FUNC N (NEW)		Equivalent to the new BASIC command.FUNC O (OLD)		Equivalent to the BASIC OLD command; editing			continues from the top of the program.	FUNC Q (QUIT)		Clears the screen, returns to BASIC and issues			a BASIC OLD command if there is a program			in memory. 			FUNC R (RENUMBER)	Renumbers the program starting at line 10 with			an increment of 10.FUNC S (SPLIT		Splits the current statement into two at theSTATEMENT)		cursor position.FUNC T (TAB)		Moves the cursor across the screen			in predefined jumps; set by the tab command			from the command screen.FUNC U (UNDO)		Undoes any changes made to the current			statement and positions the cursor at the startÄPE			of the line.	FUNC X (EXTEND)	Adds a blank screen line to the current			statement if it is not already fully extended.FUNC Z (END)		Displays the last page of the program with the			cursor positioned at the start of the last			line.COPY (REPEAT)		Inserts a complete copy of the current line as			a new statement, immediately below the current			line. FUNC - (SWAP CASE)	Changes the character at the cursor position to			upper case if it is lower case and vice-versa.FUNC , (NEXT SCREEN	Moves the cursor to the start of the nextLINE)			statement.FUNC ; (CURSOR LEFT	A faster cursor movement moving 2 places at a2 PLACES)		time.FUNC : (CURSOR RIGHT	A faster cursor movement moving 2 places at a2 PLACES)		time.FUNC . (PAGE UP)	Displays the page of the program previous to			that currently displayed.FUNC \ (PAGE DOWN)	Displays the page of the program following that			currently displayed.Function key reference table for the BBC microcomputerKey			Functionf0 (EXECUTE)         	Executes line commands if any are present in			the program. f1 (INSERT/OVERTYPE)   Switches between insert mode and overtype mode			for editing. When in insert mode, a block			cursor is displayed.f2 (TOP)               Edits from the top of the program.f3 (END)               Displays the last page of the program with the                       cursor positioned at the start of the last                       statement.f4 (RENUMBER)         	Renumbers the program starting at line 10 with			an increment of 10.f5 (CONTINUE)        	Looks for the next occurrence of the search			string in a FIND or EDIT command. f6 (DELETE TO END      Deletes all the text from the cursor positionOF LINE)            	to  the end of the current statement.f7 (TOP OF SCREEN)     Displays the edit screen with the currentÄPE			statement positioned at the top of the screen.f8 (INSERT AT END)     Creates a new statement at the end of the			program and displays the last page of the			program with the cursor on the new statement.f9 (EXIT)             	Clears the screen,  returns to BASIC and issues			a BASIC OLD command if there is a program in			memory. SHIFT f0 (NEW)         Equivalent to the BASIC NEW command.SHIFT f1 (OLD)      	Equivalent to the BASIC OLD command; editing                       continues from the top of the program.SHIFT f2 (UNDO)     	Undoes  any  changes made to the current			statement and positions the cursor at the start			of the line.SHIFT f3 (SWAP CASE)  	Changes the character at the cursor position to                       upper case if it is lower case and vice-versa.SHIFT f4 (EXTEND       Adds a blank screen line to the currentSTATEMENT)   		statement if it is not already fully extended.SHIFT f5 (MODE)        Displays the edit screen in the next mode down.			The order in which the modes are displayed is			7, 6, 4, 3, 1, 0, 7... If the program cannot be			edited in the new screen mode, the mode is			reset to mode 7 (which requires the least			screen memory) and an error message is			displayed.SHIFT f6 (LABEL)       Converts line number references to label names,                       as long as they point to valid label			statements. If  replacing a line number with a			label name would make a line too long, an error			message is displayed.SHIFT f7 (NUMBER)      Converts label references to line numbers, as                       long as they are matched by valid			label	statements somewhere in the program. If			replacing a label reference with a line number			would make a line too long, an error message is			displayed.SHIFT f8 (INSERT AT   	Inserts a  new statement at the top of theTOP)       		program and continues editing from that			statement.CTRL f0 (MARK)         Marks the current statement as the target for a                       subsequent GOTO. Any previously marked			statement has its marker removed.CTRL f1 (GOTO)         Continues editing from the marked statement. If                       there is no marked statement the command has no                       effect.ÄPECTRL f2 (SPLIT         Splits the current statement into two at theSTATEMENT)      	cursor position.CTRL f3 (JOIN          Joins the current statement and the followingSTATEMENTS)        	one to make one statement.CTRL f4 (REPEAT)   	Creates a copy of the current statement			immediately after it.        CTRL f5 (SCROLL ON)    Enables scrolling for the edit screen.CTRL f6 (SCROLL OFF)   Disables scrolling for the edit screen. CTRL f7              	For  modes  other than 7, this command sets the(BACKGROUND)           background colour for editing to the next one                       in sequence. The order of the colours is blue,                       magenta, cyan, white, black, red, green,			yellow, blue...CTRL f8                For modes other than 7, this command sets the(FOREGROUND)          	foreground  colour for editing to the next onein                       sequence. The order of the colours is white,			black, red, green, yellow, blue, magenta, cyan,			white...ÄPEÄCEAPPENDIX DERROR MESSAGESThe following is a list of Error message which may be displayed. Theyare considered self-explanatory.This is not a valid BASIC program.Unknown error message.The screen mode has been reset because it needed to much memory.Line is too long to be edited. Use UTILS/Unpack to make line shorter.The program has used up all the available memory. Changing mode maygain room.You entered a destination without a line command.A renumber failure has caused unmatched line number references to bereplaced.The search string could not be found in the program.This is not a valid command.This command must not have any parameters.This command must be followed by a number.You have entered too many parameters for this command.Only modes 0, 1, 3, 4, 6, and 7 are valid.There is not enough memory to edit in this mode.The program contains no label references.Some label references were found without matching labels.Replacing labels would make a line too long. Shorten the line andrepeat the NUMBER command.Changing line numbers to labels would make a line too long. Shortenthe line and repeat the LABEL command.No line numbers were found which matched labels.The lines cannot be joined as together they would be too long.Invalid colour.Only N, R, G, Y, B, M, C and W are allowed.ÄPEA line number must not be followed by any text.You have not typed in a replace string.No more than two strings can be entered with this command.The program cannot be renumbered with these parameters as they are twobig.You can only execute one line command at a time.You have entered an invalid block line command.You have entered an invalid delete line command.The destination must be outside the line command.You must enter both ends of the block line command.This line must have a parameter.The value for this command must be in the range 0 to 80.There is no marked line.You have not entered a search string.The line has been truncated because it was too long.The replace was not completed because it would have made a line toolong.The renumber increment must be in the range 1 to 255.Cannot update program because the file name may have been truncated.Cannot update program because no file has been previously loaded.ÄPE