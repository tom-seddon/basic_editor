ÄTSON 5ÄDH//The Advanced BASIC Editor//ÄDF//Page |P//ÄTM0ÄHM1ÄFM1ÄBM1ÄLM3ÄPL66ÄSRP 3Å.........*.......*.......*.......*.......*.......*.......*.......*.....<ÄCE2.0 THE  ADVANCED BASIC EDITOR2.1 Getting Started2.1.1   What Is The Advanced BASIC Editor?The Advanced BASIC Editor is a powerful and sophisticated tool to helpyou develop and maintain BASIC programs.Like a word processor, it allows you to move around the program andchange any part of it. Unlike a word processor, the end product is aprogram in a form which you can run directly. In addition, it providesyou with many features specific to creating BASIC programs, such asthe automatic generation of line numbers.2.1.2   Initial ScreenIf you are not already in The Advanced BASIC Editor then type:*BEand press RETURN.You should now have a screen similar to this:The Advanced BASIC EditorProgram size : 2  Bytes free   : 17150  Screen mode  : 6If you do not, check that you typed the command correctly and that theROM is properly installed. The actual numbers on the screen may bedifferent for your particular machine. This is the 'command screen', it is from here that commands for suchthings as loading and saving programs are used. Programs are createdand edited from the 'edit screen'. 2.1.3  Creating And Editing A Simple ProgramType NEW, press RETURN and then press escape. You will see an emptyscreen with the number 10 at the top with a flashing cursor beside it.This is the 'edit screen', and it is here that you will create thetext for your program. The number is the current BASIC line number andone of these is produced by The Advanced BASIC Editor at the start ofeach new line. In the text below, line numbers are included, but thereis no need for you to type them.Now type this line:    10 FOR X=2 TO 30and press RETURN. You should see the next line number, 20 appear toÄPEthe left. Now complete the program by typing the following, pressingRETURN at the end of each line.    10 FOR X=2 TO 30    20 PRINT X, X+X    30 NEXT XLet us assume that the program needs to be changed to look like this:    10 FOR X=2 TO 20 STEP 2    11 PRINT X*X    20 PRINT X+X    30 NEXT XTo achieve this, we need to change line 10, add a new line 11 anddelete part of line 20. Changing a lineThe four arrow keys are used to move the cursor around the screen. Tochange line 10, move the cursor so that it is over the 3 of 30 andtype a 2. The 2 will replace the 3, this is called overtyping.You can now add STEP 2 by moving the cursor to the end of the line andtyping the extra text. Adding an extra statementTo add the new line 11 to the program, leave the cursor on line 10 andpress RETURN. Line number 11 is automatically created and you cancomplete the line by typing:PRINT X*X Deleting textTo delete text from line 20, move the cursor so that it is over thefirst X, hold the SHIFT key down and press and release the DELETE key;the X will be removed. You can delete the comma in the same way.2.1.4   Saving A ProgramThe ESCAPE key is used to switch between the command screen and theedit screen. Press it now to return to the command screen.When you have created and edited your program, you can save it to thecurrent filing system by going into the command screen and using thecommand SAVE. For example, to save a program called MYPROG, type:SAVE MYPROGand press RETURN.2.1.5   Running A ProgramIn order to run your program you will need to return to BASIC. To dothis, go to the command screen, type: ÄPEEXITand press RETURN. This will take you back into BASIC where you canlist or run programs in the usual way.Alternatively, if you only want to run the program, go to the commandscreen, type:RUNand press RETURN. This will take you back into BASIC and run yourprogram immediately.2.1.6   Getting Back Into The Advanced BASIC Editor To get back into the editor from BASIC, type:*BEand press RETURN. Once in the editor, you can edit a program alreadyin memory or load a new program.2.1.7   Loading And Updating Programs From Disk Or TapeTo load an existing program, return to the command screen and use thecommand LOAD. For example, to load a program called MYPROG, type:  LOAD MYPROGand press RETURN. With ADFS the disk must already be mounted, if youchange disks type "*MOUNT <Drive No.>" from the command screen. (*.will confirm successful mounting of the disk by listing the contentsof the root directory.) Once a program has been loaded using "LOAD",it can be saved at any time using "UPDATE". Note the original filewill be overwritten so use a temporary copy for the "LOAD"instruction.2.1.8   The NEW And OLD Commands You have already seen the use of the command NEW. This is like the NEWin BASIC, it allows you to create a new program. The command OLDrestores your original program if there is one in memory. If not, thenyou will see the error message:Bad programand the information about program size and number of free bytes willno longer be displayed. 2.1.9   Using The Function KeysMany commands available from the command screen  have function keyequivalents. This means that you do not have to leave the edit screenand go to the command screen to use them. On the Acorn Electron thesecommands are accessed by pressing letters or numbers in combinationwith the FUNC key or in combination with the CTRL key.For example, FUNC Q [f9] is equivalent to EXIT and FUNC N [SHIFT f0]is equivalent to NEW.ÄPERemember to hold the FUNC or CTRL key down when pressing the letter ornumber key indicated.2.1.10   Useful Hints And HelpGetting HelpThe Advanced BASIC Editor has a help facility. From the commandscreen, type:HELPand press RETURN. This will give you a list of available commands andthe syntax.All commands can be abbreviated if required and the minimumabbreviations are given in Appendix A. Abbreviated commands do notneed to be terminated with a full stop.Note for BASIC I users (BBC only)Users who have BASIC I in their machines will need to type OPENUPwherever they require OPENIN to appear in their program. Failure to doso will cause problems when BASIC 1 is used to interpret the program.Users with BASIC II should use OPENIN and OPENUP in the normal way. Undoing changes made to a lineIf, before you have left a statement, you want to abandon any changesyou have made to it, press FUNC U (UNDO) [SHIFT f2] which will restorethe statement to the way it was before you made the changes. Editing from a particular lineAs well as the ESCAPE key, several other commands will take you to theedit screen. TOP will take you to the edit screen with the cursor onthe first line of the program and END will take you to the edit screenwith the cursor on the last line. Alternatively, typing a line numberand pressing RETURN will take you to the edit screen with the cursoron that line or the next highest.Information about programsAt any time, you can get information about your program and thecurrent TAB, colour, scroll settings and so on. Type INFO from thecommand screen and you will see information like this:Scroll on Overtype mode White on blackProgram name: MYPROG Last search : NoneTab value   : 5        No. of lines: 4First line  : 10       Last line   : 40 Current line: 10       Marked line : NoneÄPEPending commands: NoneIt is possible to change the default settings of TAB, scroll mode andcolour and this is explained fully in chapter 7.2.2 Editing A Program  2.2.1   Loading A Program For EditingPrograms are loaded for editing from the command screen with the LOADcommand. For example, to load a program called MYPROG, type:LOAD MYPROGand press RETURN. When the program is loaded, press ESCAPE to go tothe edit screen. Your program will be listed with a flashing cursor tothe left of the first line. 2.2.2   Moving The CursorThe simplest way to move the cursor around your program is to use thefour arrow keys. These move the cursor left, right, up and down.However, you will often want to move to a particular place in yourprogram such as the beginning, or a particular line.The table below lists the ways in which you can move the cursor.Right, left, up, down                  @R, @L, @U, @DFast right                             FUNC : [SHIFT @R]Fast left                              FUNC ; [SHIFT @L]Top of previous screen                 FUNC .Top of next screen                     FUNC /Beginning of next statement            FUNC L [CTRL @R]Beginning of previous statement        FUNC K [CTRL @L]First statement on screen              FUNC 3 [CTRL @U]Last statement on screen               FUNC 4 [CTRL @D]Beginning of next line                 FUNC , [SHIFT TAB]Next tab position                      FUNC T (TAB) [TAB]Top of the program                     FUNC A (TOP) [f2]Bottom of the program                  FUNC Z (END) [f3]To position a particular statement at the top of the screen you shouldÄPEmove the cursor on to that statement and press FUNC H (TOP OF SCREEN)[f7].A note on the use of "TAB"A "TAB" facility is achieved by FUNC T [TAB]. It has been preset toevery fifth character position. This means that when you press FUNC T[TAB] the cursor moves to every fifth character position along a line.When it reaches the end of a line, it jumps to the beginning of thenext.It is possible to change the default setting of the "TAB" and this isexplained fully in chapter 7.2.2.3   Inserting And Overtyping TextIf you move the cursor so that it is at the beginning of a line oftext and type some characters, you will see that the existing text isoverwritten. This is because you are in 'overtype mode'. To inserttext into a statement you will have to go into 'insert mode'. Do thisby pressing  FUNC I (INSERT/OVERTYPE) [f1]. The cursor will changeinto a block and any text you type will be inserted into the statementmoving any subsequent text to the right. To return to overtype mode,press FUNC I [f1] again.2.2.4   Inserting Extra StatementsExtra statements can be inserted at any point in your program. Movethe cursor to the line above which you want the extra statement toappear and press RETURN; a new line number and a blank line will beprovided automatically. Subsequent uses of RETURN will add more lines.Occasionally, inserting new statements between existing ones will meanthat the program has to be renumbered. If this should happen theeditor will do it for you automatically.To insert a new statement at the top of your program, type the commandIT from the command screen. This will take you to the edit screen withthe cursor on the new line at the top of the screen. To insert a newstatement at the end of your program, use the command IE.You can also use the function keys to insert new lines, FUNC 2 (INSERTAT END) [f8] inserts a new line at the end of the program and FUNC 1(INSERT AT TOP) [SHIFT f8] inserts a new line at the top of theprogram.2.2.5   Joining And Splitting StatementsTo join two statements together, move the cursor so that it is on thefirst of the two and press FUNC J (JOIN STATEMENTS) [CTRL f3]. Thesecond statement is added on to the end of the first and a colon isput between the two statements automatically. If the combined lengthof the two statements exceeds the maximum allowed, then the join isnot performed and an error message is displayed.To split a statement, use FUNC S (SPLIT STATEMENT) [CTRL f2]. Positionthe cursor on the character which will be the start of the newstatement, press FUNC S [CTRL f2]  and two separate statements will beÄPEformed. You can only split a statement somewhere in the middle and, asyou are creating a new statement, this may cause a renumbering of yourprogram.2.2.6   Swapping CaseTo swap case, use FUNC - (SWAP CASE) [SHIFT f3]. This converts onealphabetic character at a time from lower case to upper case, or viceversa.2.2.7   Creating Extra LinesWhen you need more lines for a statement, The Advanced BASIC Editorwill automatically provide you with a fresh line and move thefollowing statements down. Alternatively, you can create another blankline by using FUNC X (EXTEND STATEMENT) [SHIFT f4]. Any blank linesthat are put in but not used will be omitted from the final program.Length of statements allowedWhen you insert text, you should be aware of the maximum lengthallowed for a single statement. This is 251 characters which is aboutthree and a half lines in mode 3 and seven and a half lines in mode 7.2.2.8   Marking A StatementSometimes you may want to mark a statement so that you can move backto it quickly later on.To mark a statement, move the cursor on to the statement and pressFUNC 9  (MARK) [CTRL f0]. A full stop will appear on the screenbetween the line number and the start of the text. This is the'marker'. Only one statement at a time can be marked; marking anotherline will cause the marker to be removed from the first.To go to a marked statement, press FUNC 0 (GOTO MARK) [CTRL R]. If nostatement is marked GOTO will have no effect.To remove a marker move the cursor on to the marked statement andpress CTRL R (GOTO MARK) [CTRL R].2.3 Joining Programs And Renumbering2.3.1   Joining ProgramsIt is possible to join two programs together with The Advanced BASICEditor, using the command APPEND. Load the first program in the usualway:LOAD PROG1and then, staying on the command screen, join another program on tothe end of it:APPEND PROG2ÄPEIf the resulting program is not legal BASIC or if it is too large tofit into the available memory, an error message will be displayed andthe original program will be restored.If the new program is too big for the current editing mode, the modewill be reset to that which requires the least amount of memory (iemode 7).If there is any overlap of line numbers, the new program will berenumbered.2.3.2   Renumbering A ProgramYou can renumber your program at any time from the edit screen or thecommand screen.To renumber a program from the edit screen, use the function key FUNCR (RENUMBER) [f4]To renumber a program from the command screen, use the commandRENUMBER.Renumbering will start at line 10 and go up in increments of 10. Youcan alter both the increment value, and the line at which renumberingstarts, by using the RENUMBER command with this extra informationincluded. For example:RENUMBER 1000will renumber from line 1000 in increments of 10 andRENUMBER 1000,5will renumber from line 1000 in increments of 5. The increment youspecify must be in the range 1-255. If the line number exceeds themaximum (32767), an error message will be displayed.Problems arising during renumberingRenumbering is normally straight forward unless:1.   The editor is renumbering after joining two programs together, or2.   The Advanced BASIC Editor encounters a GOTO or a GOSUB statementwhich refers to a line number which does not yet exist.In the first case, confusion arises where a reference to a line numberwithin a statement is ambiguous, for instance, GOTO 10. This happenswhen line 10 actually exists in both of the programs you have joinedtogether. The Advanced BASIC Editor defaults into 'believing' that theline 10 referred to belongs to the first program. This may of coursenot always be the case. The problem can be avoided by temporarilyusing unique label references instead of line numbers and this isfully explained in chapter 6.In the second case, The Advanced BASIC Editor will respond byreplacing all non-existent line numbers referred to in GOTO and GOSUBstatements by the characters '@@@@'. An error message will then beÄPEdisplayed. Again, the use of labels rather than line numbers will helpyou to avoid this. However, if you do get this problem you can correctall the '@@@@' strings using FIND and EDIT which are explained fullyin chapter 5.2.4 Copying, Deleting And Moving Text2.4.1   Line CommandsThe Advanced BASIC Editor provides facilities for deleting, moving andcopying either single statements or blocks of text. Statements orblocks to be acted upon must be marked with 'line commands'.2.4.2   Inserting Line CommandsWhen you wish to insert a line command, move the cursor to theappropriate line and hold down the CTRL key while typing the commandwhich will consist of one or more letters. The line command willreplace the line number of the line like this:    10 X = A+B CE    X = A+BApart from the destination for a move or copy command, which will bedescribed later, only two lines at a time may contain line commands.2.4.3   Removing Line CommandsTo remove a line command from a line, move the cursor to that line andpress CTRL R (REMOVE) [CTRL R]. If you move the cursor to a linewithout a command, pressing CTRL R will remove all line commands fromthe program.Line commands are not stored as part of your program and so there isno need to remove them before saving or running it.2.4.4   Deleting TextDeleting CharactersTo delete the character immediately to the left of the cursor, pressDELETE. To delete the character at the cursor position, press SHIFT DELETE.To delete all the characters from the cursor to the end of the line,press FUNC D (DELETE TO END OF LINE) [f6]. Deleting a Single StatementThe line command is D. Move the cursor to the line and press CTRL D(DELETE STATEMENT) [CTRL D]. Now press FUNC E (EXECUTE) [f0] toexecute the deletion.ÄPEDeleting a Block of TextThe line command is DD. Move the cursor to the first line of the blockand press CTRL D [CTRL D] twice. Do the same with the last line of theblock and press FUNC E (EXECUTE) [f0] to execute the deletion.To delete from a line to the end of the program, the line command isDDE. Move the cursor to the line, insert the command and press FUNC E(EXECUTE) [f0]. To delete from a line to the top of the program, the line command isDDT. Move the cursor to the line, insert the command and press FUNC E(EXECUTE) [f0]. 2.4.5   Moving TextTo move text within a program you will have to mark the destination ofthe text to be moved as well as the text itself. To mark thedestination move the cursor to the appropriate line and insert theline command A i.e. CTRL A (AFTER) [CTRL A], if you want the movedtext to appear after the line. Alternatively insert the command B i.e.CTRL B (BEFORE) [CTRL B] if you want the text to appear before it.If you are moving text to the top or to the end of the program, you donot need to mark a destination, just use the appropriate line commandswith the text to be moved.You should note that moving text within the program will result inautomatic renumbering of the program, and this may produce errors withGOTO statements. Intelligent "MOVE" utilities are available from theUTILS menu (section 3.3.2)Moving a Single StatementThe line command is M. After marking the destination, move the cursorto the line and press CTRL M. Press FUNC E (EXECUTE) [f0] to executethe move.To move a statement to the end of the program the line command is ME. Move the cursor to the line, insert the command and press FUNC E(EXECUTE) [f0].To move a statement to the top of the program the line command is MT.Insert the command and press FUNC E (EXECUTE) [f0].Moving a Block of TextThe line command is MM. After marking the destination, move the cursorto the first line of the block and press CTRL M twice. Do the samewith the last line of the block and press FUNC E (EXECUTE) [f0] toexecute the move.To move a block of text to the end of the program, insert the linecommand MM at the first line of the block and the command MME at thelast line of the block. Press FUNC E (EXECUTE) [f0] to execute themove.To move a block of text to the top of the program, insert the lineÄPEcommand MM at the first line of the block and the command MMT at thelast line of the block. Press FUNC E (EXECUTE) [f0] to execute themove.2.4.6   Copying TextTo copy text within a program, you will have to mark the destinationof the duplicated text as described in section 2.4.5. If you arecopying  text to the top or to the end of the program you do not needto mark a destination, just use the appropriate line commands with thetext to be copied.You should note that copying text within the program will result inautomatic renumbering of the program which may produce errors withGOTO statements. Intelligent "COPY" utilities are available from theUTILS menu (section 3.3.3).Copying a Single StatementThe line command is C. After marking the destination, move the cursorto the appropriate line and press CTRL C (COPY) [CTRL C]. Press FUNC E(EXECUTE) [f0] to execute the copy.To copy a statement to the end of the program, the line command is CE.Move the cursor to the line, insert the command and press FUNC E(EXECUTE) [f0].To copy a statement to the top of the program the line command is CT.Insert the command and press FUNC E (EXECUTE) [f0].Copying a Block of TextThe line command is CC. After marking the destination, move the cursorto the first line of the block and press CTRL C (COPY) [CTRL C] twice.Do the same with the last line of the block and press FUNC E (EXECUTE)[f0] to execute the copy.To copy a block of text to the end of the program, insert the linecommand CC at the first line of the block and the command CCE at thelast line of the block. Press FUNC E (EXECUTE) [f0] to execute thecopy. To copy a block of text to the top of the program, insert the linecommand CC at the first line of the block and the command CCT at thelast line of the block. Press FUNC E (EXECUTE) [f0] to execute thecopy.2.5 Finding And Changing StringsThe Advanced BASIC Editor provides special facilities for searching aprogram for one or all occurrences of a particular string and changingit if required. There are four commands available and these are EDIT,FIND, CHANGE and QCHANGE. All four commands are used from the commandscreen. Additional search utilities are described in Section 3. NOTEthat the search strings are case sensitive (e.g. "SPACE" will not match "Space").ÄPE2.5.1   The EDIT CommandThe EDIT command is used to search a program for the first andsubsequent occurrences of a string, allowing you to edit eachstatement as it is found.For example, to change some DATA statements type:EDIT DATAand press RETURN. The command screen will be replaced by the editscreen with the first line containing the string DATA at the top. Youcan now edit the statement in the usual way.Press FUNC C (CONTINUE) [f5] to move on to the next occurrence of thestring.Press ESCAPE to return to the command screen. 2.5.2   The FIND CommandThe FIND command searches through a program and displays all thestatements containing the search string. For example, to look at allthe DATA statements, type: FIND DATAand press RETURN. The command screen will be replaced by a screen withall the lines containing the string DATA displayed. If there are moreoccurrences of the string than can be displayed on a single screen,press FUNC C (CONTINUE) [f5] to see the next screen full.Although the screen looks much like the normal edit screen, the cursorwill have changed into a block and you will not actually be able toedit any text, although you will be able to move the cursor up anddown with the arrow keys. Only a few keys are valid during a FINDcommand.- Press ESCAPE to return to the command screen.- Press FUNC A (TOP) [f2] to go to the top of the program. You will betaken to the normal edit screen where your program will be displayedwith the cursor on the first line.- Press FUNC Z (END) [f3] to go to the end of your program. Again, youwill be taken to the normal edit screen with the cursor on the lastline of your program.- Press FUNC 9 (MARK) [CTRL f0] to mark the statement you are on.- Press FUNC 0 (GOTO MARK) [CTRL f1] to edit the marked statement. Youwill be taken to the normal edit screen with the cursor on the markedstatement at the top of the screen.- Press FUNC H (TOP OF SCREEN) [f7] to position the current statementat the top of the screen and edit from that point.ÄPE2.5.3   The CHANGE And QCHANGE CommandsThere are two commands which enable you to replace one string withanother. The first is the CHANGE command which will unconditionallyreplace all occurrences of one string by another. For example:CHANGE water winewill change the string water into wine wherever it is found in theprogram. There is no indication that the change has worked withoutentering the edit mode. Alternatively follow CHANGE  with a FINDcommandThe second  command, QCHANGE, gives you the opportunity to decidewhether or not each occurrence of the string should be changed. Forexample, to change some occurrences of water into wine type:QCHANGE water wineand press RETURN. You will be taken on to the edit screen with thefirst occurrence of the search string positioned at the top of thescreen with the cursor on the first character of the string.- Press Y to change the string and move on to the next occurrence.- Press N to leave the string unchanged and move on to the nextoccurrence.- You are returned to the command screen. Use FIND or EDIT to verifythese changes and continue editing.- Press FUNC H (TOP OF SCREEN) [f7] to allow normal editing facilitiesfrom the top of the screen.In the examples given above, neither the search nor the replacestrings contained any spaces. However, CHANGE and QCHANGE can both beused with strings containing spaces. Type CHANGE or QCHANGE alone andpress RETURN. You will be prompted for the search string and then thereplacement string.2.5.4   General Notes On EDIT, FIND, CHANGE And QCHANGE1.   When the last occurrence of the search string has been found, youwill be returned to the command screen.2.   Always use upper and lower case in the search string exactly asthey are used in the program.3.   If a search is unsuccessful, you will be returned to the commandscreen and the message String not found will be displayed.4.   For EDIT and FIND, the search string may contain spaces within itbut not at the beginning or the end. To take account of leading ortrailing spaces, type EDIT or FIND alone and press RETURN. You will beprompted for the search string.5.   For EDIT and FIND, the search string is remembered so thatsubsequent presses of FUNC C (CONTINUE) [f5] from the edit screen willÄPE