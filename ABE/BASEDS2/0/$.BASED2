OC27,79TS5HP2DHce OC27,80,27,15Super Utility IV Instructions - Basic Editoroc27,77JOOC27,77LL69LM10EPoc27,45,1,27,71B Bad Program relinkoc27,45,0,27,72This attempts to recover a "Bad Program" and make it into a useable or listable form. As each line is recovered it is listed. On reaching a possible endline, caused by a TOP marker or line numbers out of sequence, the new value of TOP is shown, viz:TOP now &2345, more?_Entering Y will continue attempting to recover more lines. Continuing past the real end of the program will link in rubbish from the variables area, not to be recommended.Control codes (ASCII < 32) formed by corrupted bytes are replaced by "#".oc27,45,1,27,71F Format listingoc27,45,0,27,72This produces a formatted program listing, with every statement on a seperate line, and with FOR/NEXT, REPEAT/UNTIL and IF/THEN/ELSE structures corectly indented such that the start and end commands line up. A space is also forced between adjacent reserved words if one does not already exist. oc27,45,1,27,69,27,71@  List programoc27,45,0,27,70,27,72Lists the entire program in normal LISTO1 format.Escape stops the listing.Select paged mode if required.oc27,45,1,27,69,27,71K Key board modeoc27,45,0,27,70,27,72Allows the normal screen editor to be used on listed lines or new lines to be entered (or a single line to be deleted), without leaving BASED. Attempting an immediate command (ie no line number given) will give a bell and the input will be ignored.If you are going to edit lines listed by a search$, use Ctrl L to list them, as this does not insert the colour highlighting codes into the listing.oc27,71Changing the Highlightoc27,72: The highlight used in selective List is normally green, however it may be changed. Enter keyboard mode 'K' and then press  Shift and a funuction key (F1 to F8) followed by Return to select a new highlight, ie:F3 selects yellow, F8 selects flashing.See the User Guide page 439 for a full key/colour listing.bpOC27,45,1,27,71,27,69P Pack programOC27,45,0,27,70,27,72The object of Pack is to try to reduce the amount of memory occupied by the program. It does this by 5 means, each of which can be selected or not by answering the questions prompted at the start:REMs?Spaces?Comments?Variables?Concatenate?OC27,71REMs:OC27,72 Removes all the REM statements from the program. Ensure that the program contains no GOTO/GOSUBs to lines consisting of REM statements only.OC27,71Spaces:OC27,72 Removes all unnecessary spaces, including those normally required for correct syntax during input, ie. IF A=B|THENC=0 becomes IFA=BTHENC=0, which could not be entered directly as BTHENC would be taken as a single variable. This means that great care must be taken editing a program if it has been packed.OC27,71Comments:OC27,72 Removes comments from any assembler listings. Note that this only affects a comment from the "\" delimiter up to the next seperator (colon or CR), where deleting REMs removes the whole of the rest of the line.OC27,71Variables:OC27,72 This attempts to shorten all variable, PROC and FN names to one or two letters. The rules are:(a) If the name is already single character, does nothing.(b)|Tries the first letter of the name as a single letter name.(c)|If the name is only two letters long, does nothing.(d)|Tries a two letter name consisting of the first two letters of the current name.    If this fails it takes the first and third letters, then the first and fourth etc. If all these fail it tries the first letter plus a letter from A to z in turn.(e)|If all combinations should fail, leaves the variable name unchanged.(f)|PROC and FN names are always condensed to a single letter name, following the general rules above.As each variable is changed the old and new names will be displayed in pairs, together with the number of occurences. ie:A$ [6]Klingon% [3]   K%Key% [15]      Ke%Record$ [69]   R$PROCwrite [4]  PROCwThe order of change is first letter alphabetic, then in program order. The length of a name excludes any %,$ or ( suffix.bpoc27,71Use unused singles:oc27,72 When packing variable names the resultant short names normally start with the same letter as the original. By using 'unused singles' further space can be saved, at the expense of program legibility. The rom will try any unused initial letters as single character names before reverting to two characters, as in (c) above.OC27,71Concatenate:OC27,72 This attempts to add short lines together to form lines up to the maximum length allowed, thus saving the line overhead bytes (4 bytes per line, less 1 for the extra colon required). Certain lines cannot be concatenated, such as those including IF,DATA,REM,DEF etc and those that are targets of GOTOs etc.; these are all left alone.Before packing, the value of TOP is shown, as packing proceeds a second line shows the current value of TOP as the program is shortened. The total number of bytes saved is shown on completion.In order to get the best result from packing, variable names should be packed BEFORE concatenating lines. Also note that concatenation may produce errors if Spaces have not been stripped out first.OC27,33,0,27,69ALWAYS SAVE A COPY OF THE PROGRAM BEFORE PACKING IT.OC27,33,1bpoc27,45,1,27,69,27,71T Table line referencesoc27,45,0,27,70,27,72This produces two tables consisting of: (a) Any linenumber references by GOTOs etc that are to nonexistent lines. (Similar to the "Failed at" produced by normal renumbering).(b) A table of every line (in numeric order) that is the target of a GOTO etc., together with the number of every line that refers to it.A typical output might be:120 Nonexistent (450)300 Nonexistent (450)100 (  340) (  450) ( 1010) (1400)220 (  450) ( 1000)430 (  430) (  900)This would show that lines 120 and 300 are both mentioned in line 450, but do not exist, and would cause an error in a running program. Line 100 is refered to by lines 340,450,1010 and 1400, while line 220 is refered to in lines 450 and 1000 etc.oc27,45,1,27,69,27,71V Variables  Xrefoc27,45,0,27,70,27,72Gives a table of every variable, PROC and FN name used in the program against the numbers of lines containing those names, along with the total number of occurences. The order is: variables in first letter alphabetic order; Procs in program order; FNs in program order. eg:@% [0]A% [3]            100     200     350Able$ [4]          25      90     400Zoo( [2]           10      90PROC Val [2]     1000    1200PROC Bob [3]       50     330    1250FN Cash [2]       120     140Assembler labels: If the program contains assembler, ensure that you do not use labels or variables that are the same as the mnemonics (LDA, STX etc).Note that a line number is only shown once, even if it contains multiple references to the same variable. @% is always shown, although the number of occurences may well be 0.bpOC27,45,1,27,69,27,71R Renumberoc27,45,0,27,70,27,72RENUMBERING DOES NOT CHANGE THE oc27,71ORDERoc27,72 OF LINES WITHIN THE PROGRAM.Allows partial renumbering of program line numbers, unlike the normal Basic renumber which only does the whole program. Input syntax is given as a prompt:Start,(Finish),Newstart,(Step)?_oc27,45,1Startoc27,45,0 is the current number of the first line to be renumbered (inclusive).oc27,45,1Finishoc27,45,0 (optional), is the number of the last line to be renumbered. If it is omitted the last line of the program is assumed.oc27,45,1Newstartoc27,45,0 is the required new number of the Start line.oc27,45,1Stepoc27,45,0 (optional), is the required step between the new line numbers, minimum value 1, max 255. If the step is omitted a value of 10 is taken.Examples:315,420,200,5 :Renumbers lines 315 to 420 as 200,205,210 etc.315,420,200   :Uses the default step of 10, to give 200,210,220..315,,200      :Renumbers 315 to the end of the program as 200,210...315,315,200   :Renumbers just line 315 as line 200.All GOTOs etc to the renumbered lines are updated throughout the program.oc27,45,1Note:oc27,45,0 This routine does not produce any "Failed at line nn" error messages.RENUMBERING DOES NOT CHANGE THE oc27,71ORDERoc27,72 OF LINES WITHIN THE PROGRAM.bpoc27,45,1,27,69,27,71M Move linesoc27,45,0,27,70,27,72Moves a line or block of lines to a new position in the program, and updates any GOTOs to those lines to reflect the new numbers. Input syntax is as for Renumber, except that if Finish is not given only the Start line is moved.Examples:200,210,500,5 :Moves lines 200 to 210 (inclusive) to lines 500,505...200,,495      :Moves line 200 only to be line 495. viz:  190 REM line  200 IF X=0 THEN...  210 PRINT"..  .  490 A=1  500 B=0becomes  190 REM line  210 PRINT"..  .  490 A=1  495 IF X=0 THEN...  500 B=0oc27,45,1,27,69,27,71C Copy linesoc27,45,0,27,70,27,72Produces a copy of a line or block of lines in another position in the program, leaving the original line(s) in position. Any GOTOs to copied lines from oc27,52withinoc27,53 those new copied lines are updated, but others are left pointing to the original lines.Input syntax is as for Move. Eg:200,210,300,2 :Copies lines 200 to 210 into lines 300,302..; ie.  200 X=GET-48  210 ON X GOTO 50,90,120 ELSE 200  220 REM Rest of prog..  300 X=GET-48  302 ON X GOTO 50,90 120 ELSE 300Note that the reference to 200 has been changed to 300, as line 200 was a copied line, but the other references have not been changed as they are to lines which were NOT copied.bpoc27,69,27,71ERRORSoc27,70,27,72 in Renumber/Move/Copy:Possible error messages are:(a)|"Lines > 32767" : The new numbering scheme would require numbers greater than the maximum allowed of 32767.(b)|"Overlap at nn" : The new numbers would clash with existing line numbers that are not being changed.(c)|"Syntax error" : This can be caused by any of the following: Start or Newstart not given.  Missing comma between fields. Line number > 32767. Step of 0 or greater than 255 given. Finish < Start. Non numeric character included. Newstart lies between Start and Finish (Move/Copy only).Neither Move or Copy will overwrite existing lines with the same (new) numbers, a gap in the numbering big enough for the new lines must exist first. Renumber can be used to produce such a gap.