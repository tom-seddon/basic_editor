$START\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BASED\ MAIN FILE and SUBROUTINES\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\.'Wildcard=0.'SSLen=&70.'Addr=&71.'AddrHi=&72.'Ptr=&73.'PtrLo=&73.'PtrHi=&74.'Counter=&75.'Switch=&76.'Offset=&77.'Match=&78.'Matchend=&79.'Lineend=&7A.'Highlight=&7B.'Exec=&7C.'SSLenW=&7D.'Varpack=&7E.'Finish=&73.'Newstart=&75.'Step=&77.'Lstart=&79.'News2=&7E.'Hlt_code=&90.'RAMTOP =&91.'Old_oswrch =&92.'Scrn_Mode =&94.'Scrn_width=&95\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ * BASIC PRGM EDITOR for Electron       *\ * V1.33 IJW 21/5/84                    *\ * Colour Highlighting, CtrlB WC        *\ * Any Mode code added 1/87             *\ * Mode 7 disabled for Electron  10/87  *\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ *** MAIN SERVICE ENTRY POINT ***.'BASED\Check for E, execing instructionsLDA #0STA ExecJSR Nextoscl \Y = oscli offsetCMP #"E"BNE BlangDEC Exec \Set exec flag minus -on.BlangLDA &20E        \Save OSWRCH VectorSTA Old_oswrchLDA &20FSTA Old_oswrch+1.get_mode LDA #&A0LDX #&55JSR OSBYTE \Get Mode in XCPX #5BEQ nok  \mode 5 -> 6CPX #2BNE mok.nok INX \mode 2 -> 3LDA #22 \Change MODEJSR &FFEETXAJSR &FFEEJMP get_mode.mokSTX Scrn_ModeLDA #Our_oswrch MOD 256 \NEVER mode 7, trap oswrchSTA &20ELDA #Our_oswrch / 256STA &20F.mode7 LDA #39 \screen widthCPX #0 \mode 0?BEQ wideCPX #3 \mode 3BNE nwide.wide LDA #79.nwide STA Scrn_widthLDX #1STX &500 \Len of asci SS inc CRDEXSTX SSLen \Len of token SS less CRLDA #13STA &501STA &556 \SS="" on startupLDA #&82 \GreenSTA Hlt_codeJMP MainCtrl\ **********************************.NewSS \Enter new search$JSR Getline \Get Search$ in &700BCS MainCtrl \C=1 if EscapedTYABEQ MainCtrl \Zero SS not allowedINYSTY &500 \Save len of I SS.SaveSS LDA &6FF,YSTA &500,Y \Save SS IDEYBNE SaveSSJSR Checkline \Check for special syntaxBEQ StoreSS \Z=1 if line not to be crunchedLDA #0STA &37LDA #7STA &38JSR CRUNCHLINE \Crunch new SS.StoreSS LDY #&FF.SaveST INYLDA &700,YSTA &556,Y \Save TokenSSCMP #13BNE SaveSTSTY SSLen \Save len of tokenised SS less CRBEQ @E+5 \Skip menu\ **********************************\ * Fall back into main logic      *\ **********************************.'MainCtrlJSR MenuJSR Currentsearch \Print current search$LDX SSLenBEQ ChoiceJMP Count \Print occurences only if SS exists\ **********************************\Keyboard editing.KCB $EQUW &700$EQUB &EE$EQUB 32$EQUB &FF.Keys LDX #KCB MOD 256LDY #KCB / 256STY &2B \Set illegal #LDA #0JSR OSWORDBCS Choice \EscapedLDY #0STY &F2LDA #7STA &F3STA &38LDX #&2A \Result addrJSR Nextoscl \Skip spacesCMP #128BCC KB2STA Hlt_codeBNE Choice.KB2 JSR DECBINBCC Noline \Line# errorLDA &2BBMI NolineTYAPHASTA &37JSR CRUNCHLINEPLATAYJSR INSERTBEQ Choice.Noline LDA #7.Nol2 JSR OSWRCHJMP Choice\ **********************************.ERRORHANDLER    \Display error message JSR OSNEWL LDY#1           \Skip error no..Err1 LDA(&FD),Y BEQ Errend JSR OSWRCH INY BNE Err1.Errend JSR OSNEWL .'Choice LDX#&FFTXSLDA #132JSR OSBYTE \Get Screen bottomSTY RAMTOPJSR Dis_PrinterJSR Printmsg$EQUB 13$EQUB 131$EQUS "Ready:"$EQUB 0LDA #124STA &8C \Reset Variables flag +veJSR OSBYTE \Clear EscapeBIT ExecBMI Wait \Dont flushLDA #15LDX #1JSR OSBYTE \Flush KB.Wait JSR OSRDCH \Read inputCMP #&1BBEQ Exit \EscapedCMP #5BEQ Exit \^ECMP #4BCC Nol2 \Pass Ctrl @ABCCMP #14BCC W1 \<14 not passedCMP #16BCC Nol2 \Pass Ctrl N,O.W1 LDX #17 \18 Lines in menuAND #&DF \Force uppercaseCMP #"Q"BNE Srchmenu.Exit PHA \ A = 'B',Esc or ^EJSR En_PrinterJSR OSNEWLLDA Old_oswrch  \Restore OSWRCH vectorSTA &20ELDA Old_oswrch+1STA &20FPLAJMP WARMSTART \Rtn to Basic or Editor.Srchmenu CMP Letter,XBEQ Found \Match foundDEXBPL SrchmenuJMP MainCtrl \Any illegal entries show menu.Found LDA Addr1,XPHA \Addr HiLDA Addr2,XPHA \Addr low.Submenu \Print the Xth line of the menuLDY #0.Sub1 LDA Subfile,YINYCMP #13 \CR?BNE Sub1DEXBPL Sub1 \Pass X CRs.Sub2 LDA Subfile,YCMP #13 \CR?BEQ Sub3JSR OSASCIINYBNE Sub2.Sub3 JSR En_PrinterJMP OSNEWL \And goto routine via RTS\ *********************************.Letter \Table of acceptable keys$EQUS "@EHLNKGS"$EQUB 12$EQUS "BCFMPRTUV".Addr1 \Table of xeqn addrs Hi bytes$EQUB (Lisprog-1)/ 256 \@ is blank$EQUB (NewSS-1)/ 256$EQUB (Count -1)/ 256 \H is blank line in menu$EQUB (List -1)/ 256$EQUB (Lines-1)/ 256$EQUB (Keys-1)/ 256 \Keys is Blank line$EQUB (Global-1)/ 256$EQUB (Select-1)/ 256$EQUB (List_nohl-1)/ 256 \|L is blank line$EQUB (BADPROG-1)/ 256 \Bad prog$EQUB (COPY-1)/ 256 \Copy$EQUB (Format-1)/ 256 \Format$EQUB (Move-1)/ 256 \Move$EQUB (PACK-1)/ 256 \Pack$EQUB (Renumber-1)/ 256 \Renumber$EQUB (TABLE-1)/ 256 \Table$EQUB (UNCONCAT-1)/256 \Unpack$EQUB (VARXREF-1)/256.Addr2 \Table of xeqn addrs low bytes$EQUB (Lisprog-1)MOD 256 \@$EQUB (NewSS-1)MOD 256$EQUB (Count -1)MOD 256$EQUB (List -1)MOD 256$EQUB (Lines-1)MOD 256$EQUB (Keys-1)MOD 256$EQUB (Global-1)MOD 256$EQUB (Select-1)MOD 256$EQUB (List_nohl-1)MOD 256$EQUB (BADPROG-1)MOD 256 \Bad prog$EQUB (COPY-1)MOD 256 \Copy$EQUB (Format-1)MOD 256 \Format$EQUB (Move-1)MOD 256 \Move$EQUB (PACK-1)MOD 256 \pack$EQUB (Renumber-1)MOD 256 \Renumber$EQUB (TABLE-1)MOD 256 \Table$EQUB (UNCONCAT-1)MOD 256$EQUB (VARXREF-1)MOD256\\ *********************************\.'Count2JSR StartSTA &2ASTA &2B \Reset IACBEQ @E+5.Searchline JSR NextlineJSR SearchBNE Rts \TOP of prgm reached.Ctest BCS Searchline \No match this lineBIT &8C \Variable count?BPL Cinc \NoBIT &8B \In Quotes?BMI Cexclude \Yes.Cinc INC &2ABNE @E+4INC &2B \INC IAC.Cexclude JSR ConSrch \Check for >1 match/lineBEQ Ctest.Rts RTS.'Count \Count occurences of SSJSR Count2JSR LINIAC \Print IAC in decimalJSR Printmsg$EQUS " matches"$EQUB 0JMP Choice\ *********************************\.'Nextline LDY #3LDA (Addr),Y \=Line LenCLCADC AddrSTA Addr \Point to next lineBCC @E+4INC Addr+1RTS\ *********************************\.'Menu JSR Printmsg$EQUB 3 \Printer off\ $EQUB &16 \Mode 7..   << TRY NO MODE CHANGE?\ $EQUB 135 \but use shadow mode if available$EQUB 26 \No windows$EQUB 12 \CLS$EQUS " ƒ  BASIC EDITOR".Subfile $EQUB 13 \Start point for submenu$EQUB 13$EQUS "‡EƒEnter Search$"$EQUB 13$EQUB 13$EQUS "‡LƒList matches"$EQUB 13$EQUS "‡NƒNumber matches"$EQUB 13$EQUB 13$EQUS "‡GƒGlobal Replace"$EQUB 13$EQUS "‡SƒSelective Replace"$EQUB 13$EQUB 13$EQUS "‡BƒBad Program relink"$EQUB 13$EQUS "‡CƒCopy"$EQUB 13$EQUS "‡FƒFormat listing"$EQUB 13$EQUS "‡MƒMove"$EQUB 13$EQUS "‡PƒPack"$EQUB 13$EQUS "‡RƒRenumber"$EQUB 13$EQUS "‡TƒTable line references"$EQUB 13$EQUS " UƒUnpack"$EQUB 13$EQUS "‡VƒVariables Xref"$EQUB 13$EQUB 0 \Msg endsRTS\ *********************************.Currentsearch \Print current search$ and check SSLen for non number wildsJSR Printmsg$EQUB 13$EQUS "ƒSearch$:‡"$EQUB 0LDX &500 \Len of SSLDA &4FF,X \Last chr of SSLDX SSLen \Len of Token SSCMP #3 \WC?BCS CSX \NoDEX \Dec lenghth of SS used in searchBEQ CSZ \Cant allow -ve.CSX LDA &501 \First chr WC?CMP #3BCS CSZ \Not WCDEX.CSZ STX SSLenWLDY #0.CS1 INYLDA &500,YJSR PrbyteBNE CS1 \Not CRRTS\\ *********************************.'Type CMP #&41BCC LV1CMP #&5BBCC LV2CMP #&5FBCC LV1CMP #123BCC LV2.LV1 CLCRTS.LV2 SECRTS\ *********************************.'Lines \Print match line numbersJSR Lines2JMP Choice.'Lines2 JSR Start \Also called by Var-XrefBEQ @E+5.Nxtline JSR NextlineBIT &FFBMI LL3 \EscapedJSR Search.Li3 BNE LL3 \TOP reachedBCS Nxtline \No matchBIT &8C \Variables?BPL Linc \NoBIT &8B \In quotes?BPL Linc \NoJSR ConSrchJMP Li3 \Yes.Linc JSR LinetoIACLDA #8 \8 spaces rqdJSR IACOUTA \PRINTLine# in 8 fieldBMI Nxtline.LL3 RTS\ *********************************.'YesNo BIT Exec \0=KB, FF=ExecingBMI Y1JMP YESNO \Flush KB then...Y1 JMP YESNO2 \..Get Y/N and print Y/N+CR\.'LinetoIAC \Put line# in IACLDY #1LDA (Addr),Y \Line# HiSTA &2B \IAC HiINYLDA (Addr),Y \Line# LoSTA &2A \IAC LoRTS.'PrtLino \PRINT LINE#JSR LinetoIAC \Put line# in IACJMP LINIAC \Print line# in IAC & RTS\.'Start LDA &18STA Addr+1 \Start at PAGELDA #0STA AddrRTS\ *********************************.'Getline \Input line at &700\Rtn C=1 if escaped, Y=line len\Doesnt use OSWORD 0 to allow input of control codesBIT ExecBMI Reset \Execing, dont flushLDA #15LDX #1JSR OSBYTE \Flush KB.Reset LDX #0STX &3A \Reset len counter.Get JSR OSRDCH \Get inputBCS RtnG \EscapedCMP #127 \Delete?BNE G2LDA #121LDX #(1 EOR &80)JSR OSBYTE \Check ctrlLDA #127CPX #&80BCS G2 \-ve=Ctrl down, insert 7FDEC &3ABMI ResetLDX &3ALDY &700,X \Previous chrCPY #&7FBEQ ctrldelCPY #32 \Control chr?BCS cd2 \NoCPY #3 \WC?BCC cd2 \delete 1 for WC.ctrldel JSR OSWRCH \Delete 2 chrs for |ctrl.cd2 JSR OSWRCH JMP Get.G2 LDY &3A \PtrCPY #80 \Max line lengthBCC G1 \OkLDA #7JSR OSWRCH \Beep, too longBNE Get \Wait for delete or escape.G1 STA &700,Y \Build lineINC &3A \Inc Ptr.asci JSR PrbyteBNE Get \Not CRCLC \C=0 for good line.RtnG RTS\\.'Checkline \Check input for special syntax\Quote as first chr means dont crunch line\@@ as line start means crunch following number into internal line# form\Returns Z=0 if no special syntaxLDA &700 \First chr of lineCMP #&22 \Quotes?BEQ MoveleftCMP #"@"BNE RtnLDA &701CMP #"@" \@@ required for line#BNE RtnLDA &702PHABNE RealLDA #&30STA &702 \Insert dummy line# 0 for wildcard.Real LDA #"G"STA &700 \Construct GOTO in bufferLDA #"."STA &701 \in abbreviated formLDA #0STA &37LDA #7STA &38JSR CRUNCHLINE \Convert to tokensPLABNE Moveleft \Not wildcard line#STA &702STA &703STA &704 \Make line# bytes all 0 if wild.Moveleft LDX #0DEY.Shift LDA &701,X \Move line left 1 byteSTA &700,X \to loose quote or GOTOINXCMP #13 \CR?BNE Shift.Rtn RTS \Z=1 if Special syntax\ *********************************.'Lisprog \List the ProgramLDA #&FFSTA HighlightSTA Lineend \No highlights, whole linesJSR Start.L1 LDY #1LDA (Addr),YORA &FFBMI L2 \TOP or EscapedJSR ListlineJSR NextlineBNE L1.L2 JMP Choice.'Dis_Printer LDX #4BNE @E+4.'En_Printer LDX #0LDA #3LDY #&FB \Mask bit2JMP OSBYTE \Printer on/off\ ********************************.'Prbyte CMP #3 \wild A,B ?BCS CS2 \No.CS4 LDA #&FF \Wildcard block.CS2 CMP #13BEQ CS3b \CR.'Printasci CMP #32BCC CS3 \ctrl codeCMP #&7F \delete?BNE CS3b \ascii \7F=|?.CS3 PHALDA #"|"JSR OSWRCH \Print |ctrlPLAEOR #&40.CS3b JSR OSASCICMP #13RTS.'LineB_iac \Put line# in IACLDY #1LDA (&B),YSTA &2BINYLDA (&B),YSTA &2ARTS.'Nonexistent \Print message...JSR Printmsg$EQUS " Nonexistent ("$EQUB 0JSR OUTIAC \Print line# in 2A/BJSR Printmsg$EQUS ")"$EQUB 13$EQUB 0RTS\.'Findcall \Search program for any reference to line# in 2C/2DJSR StartB \Set (B) to PAGE.S1 LDY #4.'Findcall2 \Reentry point.S2 LDA (&B),YCMP #&8D \Line# marker?BEQ CfoundINYCMP #13 \CR?BNE S2LDA (&B),YBPL S3.S9 RTS \TOP found, rtn with Z=0, no match.S3 JSR UpB \Update (B) ptrBCC S1.Cfound JSR LINBINY \Convert to binary in IACLDA &2ACMP &2CBNE WrongLDA &2BCMP &2DBEQ S9 \Rtn with Z=1, match found.Wrong LDY &ABNE S2 \Continue search.'UpB \Update (B) pointerLDY #3LDA (&B),Y \Line length byteCLCADC &BSTA &BBCC xINC&CCLC.x RTS.'StartB LDA &18 \PageSTA &CLDY #0STY &B \Rtn Y=0RTS.'Findstart \Rtn (Addr) of Start lineLDA LstartSTA &2ALDA Lstart+1STA &2B.'Findline \Search program for line whos # is in 2A/2B, rtn (Addr)JSR Start \Set (Addr) to PAGEBEQ @E+5.FL1 JSR Nextline \Update (Addr)CLCLDY #1LDA (Addr),YBMI FL2 \Top found,Z=0,C=0INYCMP &2B \Hi byte looking forBCC FL1BNE FL2 \Gone past, Z=0,C=1LDA (Addr),YCMP &2A \Lo byteBCC FL1.FL2 RTS \RTN Z=1 if line found\C=1 if (Addr) valid, C=0 if TOP.'Topover \Backup before..LDA #13JSR OSWRCH \CR, no LF.'Topis JSR Printmsg$EQUS "TOP=&"$EQUB 0.'Toprint LDA &13 \TOP hiJSR Hex_asciLDA &12 \TOP loJMP Hex_asci \Print TOP in HEX.'Newstoiac LDX NewstartSTX &2ALDA Newstart+1STA &2BRTS.'News2_news LDA News2STA NewstartLDA News2+1STA Newstart+1RTS.'Lineiachi LDY #2LDA (Addr),YSTA &2CDEY \=1LDA (Addr),YSTA &2DRTS \Rtn -ve if top found.'Iachi_lo LDA &2CSTA &2ALDA &2DSTA &2BRTS\ ********************************************\ Trap all teletext control chrs if not mode 7\ ********************************************.'Our_oswrch CMP #&80 \oswrch points here unless mode 7 BCS ours.notus JMP (Old_oswrch).ours CMP #&A0 BCS notus CMP Hlt_code BEQ highon CMP #&87 \White BEQ highoff CMP #&89 \Flash off BEQ highoff LDA #32 JMP notus \ any other teletext -> space .highoff PHA LDA #32 JSR notus LDA #17 JSR notus LDA #128 JSR notus \COLOR 128 LDA #17 JSR notus LDA #7 JSR notus \COLOR 1 PLA RTS.highon PHA \Inverse text for highlighting  LDA #17 JSR notus LDA #135 JSR notus \COLOR 135 (White bg) LDA #17 JSR notus LDA #0 JSR notus \COLOR 0 (Black fg) LDA #32 JSR notus PLA RTS $END