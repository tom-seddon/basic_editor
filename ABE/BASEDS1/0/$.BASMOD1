$START\PROBE &BASED\BASIC MODULE 1 - CRUNCHLINE, DECRUNCH, LINBINY, INSERT\RePLAces routines in Basic Roms.Chk_alPHA CMP #&7BBCS failCMP#&5FBCS ret1CMP#&5BBCS failCMP#"A"BCS ret1 \Ok.Checkdig CMP#&3ABCS failCMP #"0"RTS.fail CLCRTS.Chkperiod CMP#"."BNE CheckdigRTS.INCptr3 INC &37 \INC ptrBNE ret1INC &38.ret1 RTS.INCget3JSR INCptr3 \INC ptrLDA(&37),Y \get chrRTS\**********************************.'CRUNCHLINE\TOKENISE line of text at (37), builds tokeniSED line at 700..LDY#0STY &3BSTY &3C.token2 LDA(&37),YCMP #&DBEQ ret1CMP #" "BNE tk2.tk1 JSR INCptr3BNE token2.tk2 CMP #"&"BNE tk4 \Not hex#, skip...tk3 JSR INCget3 \Get chrJSR Checkdig \0-9?BCS tk3 \skip digits, hex#CMP#"A"BCC token2CMP #"G"BCC tk3 \A-F still hex#BCS token2.tk4 CMP#&22 \Quote?BNE tk6.tk5 JSR INCget3 \Get chrCMP #&22BEQ tk1CMP #&DBNE tk5 \find end of textRTS.tk6 CMP#":"BNE tk7STY &3B \STArt of STAtementSTY &3C \Tokenise line#sBEQ tk1.tk7 CMP #","BEQ tk1CMP #"*"BNE tk8LDA &3B \STArt of STAtement?BNE tk15RTS \*OS cmnd..tk8 CMP #"."BEQ tk9JSR Checkdig \0-9?BCC tk14 \noLDX &3C \tokenise line#s?BEQ tk9 \noJSR Tokenlineno \Convert to binary AND insert in text in special formBCC tk16 \Ok.tk9 LDA(&37),YJSR ChkperiodBCC tk10 \End of no.JSR INCptr3JMP tk9 \Find end of no..tk10 LDX#&FFSTX &3BSTY &3CJMP token2.tk11 JSR Chk_alPHABCC tk15 \Not alPHA.tk12 LDY#0.tk13 LDA(&37),YJSR Chk_alPHABCC tk10 \not alPHAJSR INCptr3JMP tk13 \find end of variable name.tk14 CMP#"A"BCS tk17.tk15 LDX#&FFSTX &3BSTY &3C.tk16 JMP tk1.tk17 CMP#"X"BCS tk11\Set (39) to STArt of Keyword tableLDX #KEYTABLE MOD 256STX &39LDX #KEYTABLE/256STX &3A.tk18 CMP(&39),Y \First chr of keywordBCC tk12BNE tk20 \next keywrd.tk19 INYLDA (&39),Y \next chr from tableBMI tk25 \Token reached, MatchCMP (&37),Y \Compare to text chrBEQ tk19LDA(&37),Y \text chr not matchingCMP#"."BEQ tk21 \Abbreviation.tk20 INYLDA(&39),YBPL tk20 \find end of keywordCMP#&FE \last token?BNE tk23BCS tk12 \skip, variable name.tk21 INY.tk22 LDA(&39),YBMI tk25INC &39BNE tk22INC &3ABNE tk22 \find token, Y=text len..tk23 SEC \point to next keywordINYTYAADC &39STA &39BCC tk24INC &3A.tk24 LDY#0LDA(&37),YJMP tk18 \Chk next token.tk25 TAX \Correct tokenINYLDA(&39),Y \Tokenising byteSTA &3DDEYLSR ABCC tk26LDA(&37),YJSR Chk_alPHABCS tk12.tk26 TXA \tokenBIT &3DBVC tk27 \Not duplicated keywordLDX &3BBNE tk27 \not STAtement STArtCLCADC#&40 \Modify token.tk27 DEYJSR Insert_TokenLDY#0LDX#&FFLDA &3D \Tokenising flagsLSR ALSR ABCC tk28STX &3B \Not STArtSTY &3C \No line#s.tk28 LSR ABCC tk29STY &3B \STArtSTY &3C.tk29 LSR ABCC tk32PHAINY \=1.tk30 LDA(&37),YJSR Chk_alPHABCC tk31 \not alPHAJSR INCptr3JMP tk30.tk31 DEYPLA.tk32 LSR ABCC tk33STX &3C \allow line#s.tk33 LSR ABCS tk35JMP tk1.tk35 RTS.Insert_Token \Substitute byte in A for the Y bytes at (&37) PHA CLC TYA ADC&37 STA&39 LDY#0 TYA ADC&38 STA&3A PLA STA(&37),Y.z888D INY LDA(&39),Y STA(&37),Y CMP#&D BNE z888D RTS.Tokenlineno \Convert ascii# at (&37) to binary, then insert in internal             \format into text. AND#&F STA&3D STY&3E \y=0.Z889D INY LDA(&37),Y CMP#&3A BCS Z88DA CMP#&30 BCC Z88DA AND#&F PHA LDX&3E LDA&3D ASL A ROL&3E BMI Z88D5 ASL A ROL&3E BMI Z88D5 ADC&3D STA&3D TXA ADC&3E ASL&3D ROL A BMI Z88D5 BCS Z88D5 STA&3E PLA ADC&3D STA&3D BCC Z889D INC&3E BPL Z889D PHA.Z88D5 PLA LDY#0 SEC RTS.Z88DA DEY.Z88DB \Insert line# into text. (3D)=binary form, (37)=Ascii,Y=length LDA#&8D \Line# token JSR Insert_Token LDA&37 ADC#2 STA&39 LDA&38 ADC#0 STA&3A.Z88EC LDA(&37),Y STA(&39),Y DEY BNE Z88EC LDY#3 LDA&3E ORA#&40 STA(&37),Y DEY LDA&3D AND#&3F ORA#&40 STA(&37),Y DEY LDA&3D AND#&C0 STA&3D LDA&3E AND#&C0 LSR A LSR A ORA&3D LSR A LSR A EOR#&54 STA(&37),Y JSR INCptr3 JSR INCptr3 JSR INCptr3 LDY#0 CLC RTS\********************************.KEYTABLE $EQUS "AND" $EQUB &80 $EQUB &00 $EQUS "ABS" $EQUB &94 $EQUB &00 $EQUS "ACS" $EQUB &95 $EQUB &00 $EQUS "ADVAL" $EQUB &96 $EQUB &00 $EQUS "ASC" $EQUB &97 $EQUB &00 $EQUS "ASN" $EQUB &98 $EQUB &00 $EQUS "ATN" $EQUB &99 $EQUB &00 $EQUS "AUTO" $EQUB &C6 $EQUB &10 $EQUS "BGET" $EQUB &9A $EQUB &01 $EQUS "BPUT" $EQUB &D5 $EQUB &03 $EQUS "COLOUR" $EQUB &FB $EQUB &02 $EQUS "CALL" $EQUB &D6 $EQUB &02 $EQUS "CHAIN" $EQUB &D7 $EQUB &02 $EQUS "CHR$" $EQUB &BD $EQUB &00 $EQUS "CLEAR" $EQUB &D8 $EQUB &01 $EQUS "CLOSE" $EQUB &D9 $EQUB &03 $EQUS "CLG" $EQUB &DA $EQUB &01 $EQUS "CLS" $EQUB &DB $EQUB &01 $EQUS "COS" $EQUB &9B $EQUB &00 $EQUS "COUNT" $EQUB &9C $EQUB &01 $EQUS "DATA" $EQUB &DC $EQUB &20 $EQUS "DEG" $EQUB &9D $EQUB &00 $EQUS "DEF" $EQUB &DD $EQUB &00 $EQUS "DELETE" $EQUB &C7 $EQUB &10 $EQUS "DIV" $EQUB &81 $EQUB &00 $EQUS "DIM" $EQUB &DE $EQUB &02 $EQUS "DRAW" $EQUB &DF $EQUB &02 $EQUS "ENDPROC" $EQUB &E1 $EQUB &01 $EQUS "END" $EQUB &E0 $EQUB &01 $EQUS "ENVELOPE" $EQUB &E2 $EQUB &02 $EQUS "ELSE" $EQUB &8B $EQUB &14 $EQUS "EVAL" $EQUB &A0 $EQUB &00 $EQUS "ERL" $EQUB &9E $EQUB &01 $EQUS "ERROR" $EQUB &85 $EQUB &04 $EQUS "EOF" $EQUB &C5 $EQUB &01 $EQUS "EOR" $EQUB &82 $EQUB &00 $EQUS "ERR" $EQUB &9F $EQUB &01 $EQUS "EXP" $EQUB &A1 $EQUB &00 $EQUS "EXT" $EQUB &A2 $EQUB &01 $EQUS "FOR" $EQUB &E3 $EQUB &02 $EQUS "FALSE" $EQUB &A3 $EQUB &01 $EQUS "FN" $EQUB &A4 $EQUB &08 $EQUS "GOTO" $EQUB &E5 $EQUB &12 $EQUS "GET$" $EQUB &BE $EQUB &00 $EQUS "GET" $EQUB &A5 $EQUB &00 $EQUS "GOSUB" $EQUB &E4 $EQUB &12 $EQUS "GCOL" $EQUB &E6 $EQUB &02 $EQUS "HIMEM" $EQUB &93 $EQUB &43 $EQUS "INPUT" $EQUB &E8 $EQUB &02 $EQUS "IF" $EQUB &E7 $EQUB &02 $EQUS "INKEY$" $EQUB &BF $EQUB &00 $EQUS "INKEY" $EQUB &A6 $EQUB &00 $EQUS "INT" $EQUB &A8 $EQUB &00 $EQUS "INSTR(" $EQUB &A7 $EQUB &00 $EQUS "LIST" $EQUB &C9 $EQUB &10 $EQUS "LINE" $EQUB &86 $EQUB &00 $EQUS "LOAD" $EQUB &C8 $EQUB &02 $EQUS "LOMEM" $EQUB &92 $EQUB &43 $EQUS "LOCAL" $EQUB &EA $EQUB &02 $EQUS "LEFT$(" $EQUB &C0 $EQUB &00 $EQUS "LEN" $EQUB &A9 $EQUB &00 $EQUS "LET" $EQUB &E9 $EQUB &04 $EQUS "LOG" $EQUB &AB $EQUB &00 $EQUS "LN" $EQUB &AA $EQUB &00 $EQUS "MID$(" $EQUB &C1 $EQUB &00 $EQUS "MODE" $EQUB &EB $EQUB &02 $EQUS "MOD" $EQUB &83 $EQUB &00 $EQUS "MOVE" $EQUB &EC $EQUB &02 $EQUS "NEXT" $EQUB &ED $EQUB &02 $EQUS "NEW" $EQUB &CA $EQUB &01 $EQUS "NOT" $EQUB &AC $EQUB &00 $EQUS "OLD" $EQUB &CB $EQUB &01 $EQUS "ON" $EQUB &EE $EQUB &02 $EQUS "OFF" $EQUB &87 $EQUB &00 $EQUS "OR" $EQUB &84 $EQUB &00 $EQUS "OPENIN" $EQUB &8E $EQUB &00 $EQUS "OPENOUT" $EQUB &AE $EQUB &00 $EQUS "OPENUP" $EQUB &AD $EQUB &00 $EQUS "OSCLI" $EQUB &FF $EQUB &02 $EQUS "PRINT" $EQUB &F1 $EQUB &02 $EQUS "PAGE" $EQUB &90 $EQUB &43 $EQUS "PTR" $EQUB &8F $EQUB &43 $EQUS "PI" $EQUB &AF $EQUB &01 $EQUS "PLOT" $EQUB &F0 $EQUB &02 $EQUS "POINT(" $EQUB &B0 $EQUB &00 $EQUS "PROC" $EQUB &F2 $EQUB &0A $EQUS "POS" $EQUB &B1 $EQUB &01 $EQUS "RETURN" $EQUB &F8 $EQUB &01 $EQUS "REPEAT" $EQUB &F5 $EQUB &00 $EQUS "REPORT" $EQUB &F6 $EQUB &01 $EQUS "READ" $EQUB &F3 $EQUB &02 $EQUS "REM" $EQUB &F4 $EQUB &20 $EQUS "RUN" $EQUB &F9 $EQUB &01 $EQUS "RAD" $EQUB &B2 $EQUB &00 $EQUS "RESTORE" $EQUB &F7 $EQUB &12 $EQUS "RIGHT$(" $EQUB &C2 $EQUB &00 $EQUS "RND" $EQUB &B3 $EQUB &01 $EQUS "RENUMBER" $EQUB &CC $EQUB &10 $EQUS "STEP" $EQUB &88 $EQUB &00 $EQUS "SAVE" $EQUB &CD $EQUB &02 $EQUS "SGN" $EQUB &B4 $EQUB &00 $EQUS "SIN" $EQUB &B5 $EQUB &00 $EQUS "SQR" $EQUB &B6 $EQUB &00 $EQUS "SPC" $EQUB &89 $EQUB &00 $EQUS "STR$" $EQUB &C3 $EQUB &00 $EQUS "STRING$(" $EQUB &C4 $EQUB &00 $EQUS "SOUND" $EQUB &D4 $EQUB &02 $EQUS "STOP" $EQUB &FA $EQUB &01 $EQUS "TAN" $EQUB &B7 $EQUB &00 $EQUS "THEN" $EQUB &8C $EQUB &14 $EQUS "TO" $EQUB &B8 $EQUB &00 $EQUS "TAB(" $EQUB &8A $EQUB &00 $EQUS "TRACE" $EQUB &FC $EQUB &12 $EQUS "TIME" $EQUB &91 $EQUB &43 $EQUS "TRUE" $EQUB &B9 $EQUB &01 $EQUS "UNTIL" $EQUB &FD $EQUB &02 $EQUS "USR" $EQUB &BA $EQUB &00 $EQUS "VDU" $EQUB &EF $EQUB &02 $EQUS "VAL" $EQUB &BB $EQUB &00 $EQUS "VPOS" $EQUB &BC $EQUB &01 $EQUS "WIDTH" $EQUB &FE $EQUB &02 $EQUS "PAGE" $EQUB &D0 $EQUB &00 $EQUS "PTR" $EQUB &CF $EQUB &00 $EQUS "TIME" $EQUB &D1 $EQUB &00 $EQUS "LOMEM" $EQUB &D2 $EQUB &00 $EQUS "HIMEM" $EQUB &D3 $EQUB &00\********************************.'DECRUNCH\Print chr in A, detokenise if necessary STA &37 CMP #&80 BCC ZB558 \Not token LDA #KEYTABLE MOD 256 STA &38 LDA #KEYTABLE/256 STA &39 STY &3A.ZB51E LDY #&00.ZB520 INY  LDA (&38),Y BPL ZB520 CMP &37 BEQ ZB536 INY  TYA  SEC  ADC &38 STA &38 BCC ZB51E INC &39 BCS ZB51E.ZB536 LDY #&00.ZB538 LDA (&38),Y BMI ZB542 JSR ZB558 INY  BNE ZB538.ZB542 LDY &3A RTS .ZB558 CMP #&0D BNE ZB567 JMP &FFEE.ZB567 JMP (&20E)\*****************************.'LINBINY\Convert internal format line# at (&B),Y to binary in IAC INY \Skip token LDA (&B),Y ASL A ASL A TAX AND #&C0 INY EOR(&B),Y STA &2A TXA ASL A ASL A INY EOR (&B),Y STA &2B INY STY &A SEC RTS\********************************.'INSERT\INSERT LINE, text at 700,Y; line# in IAC STY &3B \Save Y JSR Delete_line \Delete line if it exists LDY #&07 STY &3C LDY #&00 LDA #&0D CMP (&3B),Y BEQ ZBD10.ZBC9E INY  CMP (&3B),Y BNE ZBC9E INY  INY  INY  STY &3F INC &3F LDA &12 STA &39 LDA &13 STA &3A JSR ZBE92 \Update TOP with Y STA &37 LDA &13 STA &38 DEY  LDA &06 CMP &12 LDA &07 SBC &13 BCS ZBCD6 BRK $EQUB 0 $EQUS "Line space" BRK.ZBCD6 LDA (&39),Y STA (&37),Y TYA  BNE ZBCE1 DEC &3A DEC &38.ZBCE1 DEY  TYA  ADC &39 LDX &3A BCC ZBCEA INX .ZBCEA CMP &3D TXA  SBC &3E BCS ZBCD6 SEC  LDY #&01 LDA &2B STA (&3D),Y INY  LDA &2A STA (&3D),Y INY  LDA &3F STA (&3D),Y.ZBE56 TYA ADC &3D \ADD Y to 3D STA &3D BCC ZBE5F INC &3E.ZBE5F LDY #&FF.ZBD07 INY  LDA (&3B),Y STA (&3D),Y CMP #&0D BNE ZBD07.ZBD10 RTS .Delete_line \line# in IAC JSR Z9970 \Find line BCS ZBC80 \Not found LDA &3D SBC #&02 STA &37 STA &3D STA &12 LDA &3E SBC #&00 STA &38 STA &13 STA &3E LDY #&03 LDA (&37),Y CLC  ADC &37 STA &37 BCC ZBC53 INC &38.ZBC53 LDY #&00.ZBC55 LDA (&37),Y STA (&12),Y CMP #&0D BEQ ZBC66.ZBC5D INY  BNE ZBC55 INC &38 INC &13 BNE ZBC55.ZBC66 INY  BNE ZBC6D INC &38 INC &13.ZBC6D LDA (&37),Y STA (&12),Y BMI ZBC7C JSR ZBC81 JSR ZBC81 JMP ZBC5D.ZBC7C JSR ZBE92 CLC .ZBC80 RTS .ZBC81 INY  BNE ZBC88 INC &13 INC &38.ZBC88 LDA (&37),Y STA (&12),Y RTS \Find line whose number is in IAC. If not found C=1.\If it exists returns address-1 of text in (&3D).Z9970 LDY #&00 STY &3D LDA &18 STA &3E.Z9978 LDY #&01 LDA (&3D),Y CMP &2B BCS Z998E.Z9980 LDY #&03 LDA (&3D),Y ADC &3D STA &3D BCC Z9978 INC &3E BCS Z9978.Z998E BNE Z99A4 LDY #&02 LDA (&3D),Y CMP &2A BCC Z9980 BNE Z99A4 TYA  ADC &3D STA &3D BCC Z99A4 INC &3E CLC .Z99A4 LDY #&02 RTS \********************************.ZBE92 TYA \Add Y to TOP ADC &12 STA &12 BCC ZBE9B INC &13.ZBE9B LDY#1 RTS$END