
                .section zp
byte_0:
                .fill 1	
unk_1:
                .fill 1 
                .fill 1 
                .fill 1 
                .fill 1 
                .fill 1 
HIMEM:
                .fill 1
                .fill 1

; number of screen rows in line * ?code_area_width
screen_chars_in_line:
                .fill 2
background_colour:
                .fill 1 
foreground_colour:
                .fill 1
ptr0:
                .fill 2
ptr1:
                .fill 2
cursor_offset:
                .fill 1

; The offset MSB is mainly an issue for cursor movement. The
; detokenized line can never exceed 252 bytes, but the line's area on
; screen can be greater than that, and the cursor's offset in this
; larger region needs to be tracked, if only to block edits.
cursor_offset_msb:
                .fill 1
                
TOP:
                .fill 1
                .fill 1		
spare_14:
                .fill 1
last_error_number:
                .fill 1	
is_bad_program:
                .fill 1 
oshwm:
                .fill 1
                .fill 1
readline_ptr_lsb:
                .fill 1 
readline_ptr_msb:
                .fill 1 
unk_1B:
                .fill 1 
unk_1C:
                .fill 1 
unk_1D:
                .fill 1 
unk_1E:
                .fill 1 
unk_1F:
                .fill 1 
byte_20:
                .fill 1	
byte_21:
                .fill 1	
byte_22:
                .fill 1	
byte_23:
                .fill 1	
byte_24:
                .fill 1	
byte_25:
                .fill 1	
byte_26:
                .fill 1	
byte_27:
                .fill 1	
byte_28:
                .fill 1	
unk_29:
                .fill 1 
unk_2A:
                .fill 1 
byte_2B:
                .fill 1	
byte_2C:
                .fill 1	
byte_2D:
                .fill 1	
unk_2E:
                .fill 1 
unk_2F:
                .fill 1 
unk_30:
                .fill 1 
cursor_size:
                .fill 1 
unk_32:
                .fill 1 
unk_33:
                .fill 1 
unk_34:
                .fill 1 
byte_35:
                .fill 1	
byte_36:
                .fill 1	
unk_37:
                .fill 1 
byte_38:
                .fill 1	
byte_39:
                .fill 1	
byte_3A:
                .fill 1	
byte_3B:
                .fill 1	
is_insert_mode:
                .fill 1 
is_scroll_on:
                .fill 1	
input_ptr:
                .fill 2
byte_40:
                .fill 1	
byte_41:
                .fill 1	
byte_42:
                .fill 1	
byte_43:
                .fill 1	
byte_44:
                .fill 1	
byte_45:
                .fill 1	
byte_46:
                .fill 1	
byte_47:
                .fill 1	
byte_48:
                .fill 1	
byte_49:
                .fill 1	
current_line_no_msb:
                .fill 1 
current_line_no_lsb:
                .fill 1 
                .fill 1 
marked_line_no_msb:
                .fill 1 
marked_line_no_lsb:
                .fill 1 
                .fill 1 
byte_50:
                .fill 1	
byte_51:
                .fill 1	
; program_name:
;                 .fill 15
tab_value:
                .fill 1 
search_string_length:
                .fill 1	
case_insensitive_search:        ;$80 or $00.
                .fill 1
search_tmp:
                .fill 1
print_1_char_a:
                .fill 1
print_1_char_y:
                .fill 1
print_1_char_not_teletext:
                .fill 1
itoa_value:
                .fill 2
itoa_uninteresting:
                .fill 1
atoi_y:
                .fill 1
language_entry_mode:
                ; if top bit set, call exit_and_OLD after printing a
                ; BRK message.
                .fill 1

                ; points to CR-terminated program name, wherever it
                ; is.
program_name_ptr:
                .fill 2

                ; if bit 7 set, clear screen before entering command
                ; mode. Some commands pretend to be in command mode
                ; when invoked from edit mode - this is how command
                ; knows whether to clear the screen if they cause an
                ; error.
should_cls_before_command_prompt:
                .fill 1

                .if ENABLE_DEBUG
debug_counter:
                .fill 2
debug_flag:
                .fill 1
debug_ptr:
                .fill 2
                .endif
                
                .send zp

; zero page vars that occupy space that's (hopefully) unused by BASIC.
                
                .section basic_unused_zp
                .send basic_unused_zp